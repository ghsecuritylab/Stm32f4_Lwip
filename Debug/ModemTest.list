
ModemTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003d18  08003d18  00013d18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00004ab4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004ac0  20004ac0  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c988  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003821  00000000  00000000  0003c9c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000d050  00000000  00000000  000401e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  0004d238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  0004e280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00008907  00000000  00000000  0004f790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006bff  00000000  00000000  00058097  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005ec96  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003034  00000000  00000000  0005ed14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d00 	.word	0x08003d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08003d00 	.word	0x08003d00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x30>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000502:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800050a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f82f 	bl	8000570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f003 fb12 	bl	8003b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f003 fa72 	bl	8003a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800051c:	2000      	movs	r0, #0
 800051e:	bd08      	pop	{r3, pc}
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000524:	4a03      	ldr	r2, [pc, #12]	; (8000534 <HAL_IncTick+0x10>)
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <HAL_IncTick+0x14>)
 8000528:	6811      	ldr	r1, [r2, #0]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	440b      	add	r3, r1
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000492c 	.word	0x2000492c
 8000538:	20000000 	.word	0x20000000

0800053c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800053c:	4b01      	ldr	r3, [pc, #4]	; (8000544 <HAL_GetTick+0x8>)
 800053e:	6818      	ldr	r0, [r3, #0]
}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000492c 	.word	0x2000492c

08000548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000548:	b538      	push	{r3, r4, r5, lr}
 800054a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800054c:	f7ff fff6 	bl	800053c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000550:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000552:	bf1c      	itt	ne
 8000554:	4b05      	ldrne	r3, [pc, #20]	; (800056c <HAL_Delay+0x24>)
 8000556:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000558:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800055a:	bf18      	it	ne
 800055c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800055e:	f7ff ffed 	bl	800053c <HAL_GetTick>
 8000562:	1b40      	subs	r0, r0, r5
 8000564:	4284      	cmp	r4, r0
 8000566:	d8fa      	bhi.n	800055e <HAL_Delay+0x16>
  {
  }
}
 8000568:	bd38      	pop	{r3, r4, r5, pc}
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000

08000570 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4a07      	ldr	r2, [pc, #28]	; (8000590 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000572:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000574:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000578:	041b      	lsls	r3, r3, #16
 800057a:	0c1b      	lsrs	r3, r3, #16
 800057c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000580:	0200      	lsls	r0, r0, #8
 8000582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000586:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800058a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800058c:	60d3      	str	r3, [r2, #12]
 800058e:	4770      	bx	lr
 8000590:	e000ed00 	.word	0xe000ed00

08000594 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	68dc      	ldr	r4, [r3, #12]
 800059a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800059e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a4:	2b04      	cmp	r3, #4
 80005a6:	bf28      	it	cs
 80005a8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ac:	f04f 0501 	mov.w	r5, #1
 80005b0:	fa05 f303 	lsl.w	r3, r5, r3
 80005b4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b8:	bf8c      	ite	hi
 80005ba:	3c03      	subhi	r4, #3
 80005bc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005be:	4019      	ands	r1, r3
 80005c0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c2:	fa05 f404 	lsl.w	r4, r5, r4
 80005c6:	3c01      	subs	r4, #1
 80005c8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	ea42 0201 	orr.w	r2, r2, r1
 80005d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d4:	bfad      	iteet	ge
 80005d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005da:	f000 000f 	andlt.w	r0, r0, #15
 80005de:	4b06      	ldrlt	r3, [pc, #24]	; (80005f8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	bfb5      	itete	lt
 80005e6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00
 80005f8:	e000ed14 	.word	0xe000ed14

080005fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005fc:	2800      	cmp	r0, #0
 80005fe:	db08      	blt.n	8000612 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000600:	0942      	lsrs	r2, r0, #5
 8000602:	2301      	movs	r3, #1
 8000604:	f000 001f 	and.w	r0, r0, #31
 8000608:	fa03 f000 	lsl.w	r0, r3, r0
 800060c:	4b01      	ldr	r3, [pc, #4]	; (8000614 <HAL_NVIC_EnableIRQ+0x18>)
 800060e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100

08000618 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000618:	6803      	ldr	r3, [r0, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000620:	f023 0303 	bic.w	r3, r3, #3
 8000624:	2118      	movs	r1, #24
 8000626:	3a10      	subs	r2, #16
 8000628:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800062e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000630:	bf88      	it	hi
 8000632:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000634:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000636:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000638:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 800063a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	08003d18 	.word	0x08003d18

08000644 <HAL_DMA_Init>:
{
 8000644:	b570      	push	{r4, r5, r6, lr}
 8000646:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000648:	f7ff ff78 	bl	800053c <HAL_GetTick>
 800064c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800064e:	2c00      	cmp	r4, #0
 8000650:	d071      	beq.n	8000736 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000652:	2300      	movs	r3, #0
 8000654:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000658:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800065a:	2302      	movs	r3, #2
 800065c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000660:	6813      	ldr	r3, [r2, #0]
 8000662:	f023 0301 	bic.w	r3, r3, #1
 8000666:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000668:	6821      	ldr	r1, [r4, #0]
 800066a:	680b      	ldr	r3, [r1, #0]
 800066c:	07d8      	lsls	r0, r3, #31
 800066e:	d43c      	bmi.n	80006ea <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000670:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000672:	4d32      	ldr	r5, [pc, #200]	; (800073c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000674:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000676:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000678:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800067a:	68a3      	ldr	r3, [r4, #8]
 800067c:	4313      	orrs	r3, r2
 800067e:	68e2      	ldr	r2, [r4, #12]
 8000680:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000682:	6922      	ldr	r2, [r4, #16]
 8000684:	4313      	orrs	r3, r2
 8000686:	6962      	ldr	r2, [r4, #20]
 8000688:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800068a:	69e2      	ldr	r2, [r4, #28]
 800068c:	4303      	orrs	r3, r0
 800068e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000690:	6a22      	ldr	r2, [r4, #32]
 8000692:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000694:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000696:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000698:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800069c:	bf01      	itttt	eq
 800069e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80006a0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80006a2:	4335      	orreq	r5, r6
 80006a4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80006a6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80006a8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006aa:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80006ac:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80006b4:	d10b      	bne.n	80006ce <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80006b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006b8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80006ba:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80006bc:	b13d      	cbz	r5, 80006ce <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80006be:	b9f8      	cbnz	r0, 8000700 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80006c0:	2a01      	cmp	r2, #1
 80006c2:	d02d      	beq.n	8000720 <HAL_DMA_Init+0xdc>
 80006c4:	d301      	bcc.n	80006ca <HAL_DMA_Init+0x86>
 80006c6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80006c8:	d101      	bne.n	80006ce <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80006ca:	01ea      	lsls	r2, r5, #7
 80006cc:	d42b      	bmi.n	8000726 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80006ce:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80006d0:	4620      	mov	r0, r4
 80006d2:	f7ff ffa1 	bl	8000618 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80006d6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80006d8:	233f      	movs	r3, #63	; 0x3f
 80006da:	4093      	lsls	r3, r2
 80006dc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006de:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80006e0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006e2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80006e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006ea:	f7ff ff27 	bl	800053c <HAL_GetTick>
 80006ee:	1b40      	subs	r0, r0, r5
 80006f0:	2805      	cmp	r0, #5
 80006f2:	d9b9      	bls.n	8000668 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80006f4:	2320      	movs	r3, #32
 80006f6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80006f8:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80006fa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000700:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000704:	d113      	bne.n	800072e <HAL_DMA_Init+0xea>
    switch (tmp)
 8000706:	2a03      	cmp	r2, #3
 8000708:	d8e1      	bhi.n	80006ce <HAL_DMA_Init+0x8a>
 800070a:	a001      	add	r0, pc, #4	; (adr r0, 8000710 <HAL_DMA_Init+0xcc>)
 800070c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8000710:	08000727 	.word	0x08000727
 8000714:	080006cb 	.word	0x080006cb
 8000718:	08000727 	.word	0x08000727
 800071c:	08000721 	.word	0x08000721
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000720:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000724:	d1d3      	bne.n	80006ce <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000726:	2340      	movs	r3, #64	; 0x40
 8000728:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800072a:	2001      	movs	r0, #1
 800072c:	e7e5      	b.n	80006fa <HAL_DMA_Init+0xb6>
    switch (tmp)
 800072e:	2a02      	cmp	r2, #2
 8000730:	d9f9      	bls.n	8000726 <HAL_DMA_Init+0xe2>
 8000732:	2a03      	cmp	r2, #3
 8000734:	e7c8      	b.n	80006c8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000736:	2001      	movs	r0, #1
 8000738:	bd70      	pop	{r4, r5, r6, pc}
 800073a:	bf00      	nop
 800073c:	f010803f 	.word	0xf010803f

08000740 <HAL_DMA_Start_IT>:
{
 8000740:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8000742:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000746:	2c01      	cmp	r4, #1
 8000748:	d036      	beq.n	80007b8 <HAL_DMA_Start_IT+0x78>
 800074a:	2401      	movs	r4, #1
 800074c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000750:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000754:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8000756:	2c01      	cmp	r4, #1
 8000758:	f04f 0500 	mov.w	r5, #0
 800075c:	f04f 0402 	mov.w	r4, #2
 8000760:	d128      	bne.n	80007b4 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000762:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000766:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000768:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800076a:	6825      	ldr	r5, [r4, #0]
 800076c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000770:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000772:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000774:	6883      	ldr	r3, [r0, #8]
 8000776:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000778:	bf0e      	itee	eq
 800077a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800077c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800077e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000780:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8000782:	bf08      	it	eq
 8000784:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000786:	233f      	movs	r3, #63	; 0x3f
 8000788:	4093      	lsls	r3, r2
 800078a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	f043 0316 	orr.w	r3, r3, #22
 8000792:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000794:	6963      	ldr	r3, [r4, #20]
 8000796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800079c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800079e:	b11b      	cbz	r3, 80007a8 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 80007a0:	6823      	ldr	r3, [r4, #0]
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80007a8:	6823      	ldr	r3, [r4, #0]
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007b0:	2000      	movs	r0, #0
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80007b4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80007b8:	2002      	movs	r0, #2
}
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007bc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d003      	beq.n	80007cc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80007c8:	2001      	movs	r0, #1
 80007ca:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80007cc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80007ce:	2305      	movs	r3, #5
 80007d0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80007d4:	6813      	ldr	r3, [r2, #0]
 80007d6:	f023 0301 	bic.w	r3, r3, #1
 80007da:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80007dc:	2000      	movs	r0, #0
}
 80007de:	4770      	bx	lr

080007e0 <HAL_DMA_IRQHandler>:
{
 80007e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80007e6:	4b5a      	ldr	r3, [pc, #360]	; (8000950 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007e8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80007ea:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007ec:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80007ee:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007f0:	2208      	movs	r2, #8
 80007f2:	409a      	lsls	r2, r3
 80007f4:	4216      	tst	r6, r2
{
 80007f6:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007f8:	d00c      	beq.n	8000814 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80007fa:	6801      	ldr	r1, [r0, #0]
 80007fc:	6808      	ldr	r0, [r1, #0]
 80007fe:	0740      	lsls	r0, r0, #29
 8000800:	d508      	bpl.n	8000814 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000802:	6808      	ldr	r0, [r1, #0]
 8000804:	f020 0004 	bic.w	r0, r0, #4
 8000808:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800080a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800080c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800080e:	f042 0201 	orr.w	r2, r2, #1
 8000812:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000814:	2201      	movs	r2, #1
 8000816:	409a      	lsls	r2, r3
 8000818:	4216      	tst	r6, r2
 800081a:	d008      	beq.n	800082e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800081c:	6821      	ldr	r1, [r4, #0]
 800081e:	6949      	ldr	r1, [r1, #20]
 8000820:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000822:	bf41      	itttt	mi
 8000824:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000826:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000828:	f042 0202 	orrmi.w	r2, r2, #2
 800082c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800082e:	2204      	movs	r2, #4
 8000830:	409a      	lsls	r2, r3
 8000832:	4216      	tst	r6, r2
 8000834:	d008      	beq.n	8000848 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000836:	6821      	ldr	r1, [r4, #0]
 8000838:	6809      	ldr	r1, [r1, #0]
 800083a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800083c:	bf41      	itttt	mi
 800083e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000840:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000842:	f042 0204 	orrmi.w	r2, r2, #4
 8000846:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000848:	2210      	movs	r2, #16
 800084a:	409a      	lsls	r2, r3
 800084c:	4216      	tst	r6, r2
 800084e:	d010      	beq.n	8000872 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	6819      	ldr	r1, [r3, #0]
 8000854:	0709      	lsls	r1, r1, #28
 8000856:	d50c      	bpl.n	8000872 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000858:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	0350      	lsls	r0, r2, #13
 800085e:	d535      	bpl.n	80008cc <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	0319      	lsls	r1, r3, #12
 8000864:	d401      	bmi.n	800086a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000868:	e000      	b.n	800086c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800086a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800086c:	b10b      	cbz	r3, 8000872 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800086e:	4620      	mov	r0, r4
 8000870:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000872:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000874:	2220      	movs	r2, #32
 8000876:	408a      	lsls	r2, r1
 8000878:	4216      	tst	r6, r2
 800087a:	d038      	beq.n	80008ee <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800087c:	6823      	ldr	r3, [r4, #0]
 800087e:	6818      	ldr	r0, [r3, #0]
 8000880:	06c6      	lsls	r6, r0, #27
 8000882:	d534      	bpl.n	80008ee <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000884:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000886:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800088a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800088c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800088e:	d125      	bne.n	80008dc <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000890:	f022 0216 	bic.w	r2, r2, #22
 8000894:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000896:	695a      	ldr	r2, [r3, #20]
 8000898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800089c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800089e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008a0:	b90a      	cbnz	r2, 80008a6 <HAL_DMA_IRQHandler+0xc6>
 80008a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80008a4:	b11a      	cbz	r2, 80008ae <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	f022 0208 	bic.w	r2, r2, #8
 80008ac:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80008ae:	233f      	movs	r3, #63	; 0x3f
 80008b0:	408b      	lsls	r3, r1
 80008b2:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80008b4:	2300      	movs	r3, #0
 80008b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80008ba:	2301      	movs	r3, #1
 80008bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80008c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80008c2:	b10b      	cbz	r3, 80008c8 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80008c4:	4620      	mov	r0, r4
 80008c6:	4798      	blx	r3
}
 80008c8:	b003      	add	sp, #12
 80008ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80008d0:	bf5e      	ittt	pl
 80008d2:	681a      	ldrpl	r2, [r3, #0]
 80008d4:	f022 0208 	bicpl.w	r2, r2, #8
 80008d8:	601a      	strpl	r2, [r3, #0]
 80008da:	e7c4      	b.n	8000866 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008dc:	0350      	lsls	r0, r2, #13
 80008de:	d528      	bpl.n	8000932 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	0319      	lsls	r1, r3, #12
 80008e4:	d432      	bmi.n	800094c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80008e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80008e8:	b10b      	cbz	r3, 80008ee <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80008ea:	4620      	mov	r0, r4
 80008ec:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80008ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0e9      	beq.n	80008c8 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80008f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008f6:	07da      	lsls	r2, r3, #31
 80008f8:	d519      	bpl.n	800092e <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80008fa:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80008fc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80008fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000902:	6813      	ldr	r3, [r2, #0]
 8000904:	f023 0301 	bic.w	r3, r3, #1
 8000908:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800090a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800090e:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000912:	9b01      	ldr	r3, [sp, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	429f      	cmp	r7, r3
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	d302      	bcc.n	8000922 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	07db      	lsls	r3, r3, #31
 8000920:	d4f7      	bmi.n	8000912 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000922:	2300      	movs	r3, #0
 8000924:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000928:	2301      	movs	r3, #1
 800092a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800092e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000930:	e7c7      	b.n	80008c2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000938:	d108      	bne.n	800094c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800093a:	6819      	ldr	r1, [r3, #0]
 800093c:	f021 0110 	bic.w	r1, r1, #16
 8000940:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000942:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000944:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000948:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800094c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800094e:	e7cb      	b.n	80008e8 <HAL_DMA_IRQHandler+0x108>
 8000950:	20000008 	.word	0x20000008

08000954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000958:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000b0c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000960:	4a68      	ldr	r2, [pc, #416]	; (8000b04 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000962:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000b10 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000966:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000968:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800096a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800096e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000970:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000974:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000978:	45b6      	cmp	lr, r6
 800097a:	f040 80ae 	bne.w	8000ada <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097e:	684c      	ldr	r4, [r1, #4]
 8000980:	f024 0710 	bic.w	r7, r4, #16
 8000984:	2f02      	cmp	r7, #2
 8000986:	d116      	bne.n	80009b6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000988:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800098c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000990:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000994:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000998:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800099c:	f04f 0c0f 	mov.w	ip, #15
 80009a0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009a4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009a8:	690d      	ldr	r5, [r1, #16]
 80009aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80009ae:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009b2:	f8ca 5020 	str.w	r5, [sl, #32]
 80009b6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ba:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80009bc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c0:	fa05 f50a 	lsl.w	r5, r5, sl
 80009c4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009ca:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009ce:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009d4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80009da:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009de:	d811      	bhi.n	8000a04 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80009e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009e2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e6:	68cf      	ldr	r7, [r1, #12]
 80009e8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80009ec:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80009f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80009f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009f8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80009fc:	409f      	lsls	r7, r3
 80009fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a02:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a04:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a06:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a08:	688f      	ldr	r7, [r1, #8]
 8000a0a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a0e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a10:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a12:	00e5      	lsls	r5, r4, #3
 8000a14:	d561      	bpl.n	8000ada <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	f04f 0b00 	mov.w	fp, #0
 8000a1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a1e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a22:	4d39      	ldr	r5, [pc, #228]	; (8000b08 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a24:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000a28:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000a2c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000a30:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000a34:	9703      	str	r7, [sp, #12]
 8000a36:	9f03      	ldr	r7, [sp, #12]
 8000a38:	f023 0703 	bic.w	r7, r3, #3
 8000a3c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000a40:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a44:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a48:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a4c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a50:	f04f 0e0f 	mov.w	lr, #15
 8000a54:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a58:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a5a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5e:	d043      	beq.n	8000ae8 <HAL_GPIO_Init+0x194>
 8000a60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a64:	42a8      	cmp	r0, r5
 8000a66:	d041      	beq.n	8000aec <HAL_GPIO_Init+0x198>
 8000a68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a6c:	42a8      	cmp	r0, r5
 8000a6e:	d03f      	beq.n	8000af0 <HAL_GPIO_Init+0x19c>
 8000a70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a74:	42a8      	cmp	r0, r5
 8000a76:	d03d      	beq.n	8000af4 <HAL_GPIO_Init+0x1a0>
 8000a78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a7c:	42a8      	cmp	r0, r5
 8000a7e:	d03b      	beq.n	8000af8 <HAL_GPIO_Init+0x1a4>
 8000a80:	4548      	cmp	r0, r9
 8000a82:	d03b      	beq.n	8000afc <HAL_GPIO_Init+0x1a8>
 8000a84:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000a88:	42a8      	cmp	r0, r5
 8000a8a:	d039      	beq.n	8000b00 <HAL_GPIO_Init+0x1ac>
 8000a8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a90:	42a8      	cmp	r0, r5
 8000a92:	bf14      	ite	ne
 8000a94:	2508      	movne	r5, #8
 8000a96:	2507      	moveq	r5, #7
 8000a98:	fa05 f50c 	lsl.w	r5, r5, ip
 8000a9c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aa0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000aa2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000aa4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000aaa:	bf0c      	ite	eq
 8000aac:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000aae:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000ab0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000ab2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000ab8:	bf0c      	ite	eq
 8000aba:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000abc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000abe:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ac2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	bf0c      	ite	eq
 8000ac8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000aca:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000acc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000ace:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ad2:	bf54      	ite	pl
 8000ad4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000ad6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ad8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	3301      	adds	r3, #1
 8000adc:	2b10      	cmp	r3, #16
 8000ade:	f47f af44 	bne.w	800096a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ae2:	b005      	add	sp, #20
 8000ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae8:	465d      	mov	r5, fp
 8000aea:	e7d5      	b.n	8000a98 <HAL_GPIO_Init+0x144>
 8000aec:	2501      	movs	r5, #1
 8000aee:	e7d3      	b.n	8000a98 <HAL_GPIO_Init+0x144>
 8000af0:	2502      	movs	r5, #2
 8000af2:	e7d1      	b.n	8000a98 <HAL_GPIO_Init+0x144>
 8000af4:	2503      	movs	r5, #3
 8000af6:	e7cf      	b.n	8000a98 <HAL_GPIO_Init+0x144>
 8000af8:	2504      	movs	r5, #4
 8000afa:	e7cd      	b.n	8000a98 <HAL_GPIO_Init+0x144>
 8000afc:	2505      	movs	r5, #5
 8000afe:	e7cb      	b.n	8000a98 <HAL_GPIO_Init+0x144>
 8000b00:	2506      	movs	r5, #6
 8000b02:	e7c9      	b.n	8000a98 <HAL_GPIO_Init+0x144>
 8000b04:	40013c00 	.word	0x40013c00
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021400 	.word	0x40021400

08000b14 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b14:	b10a      	cbz	r2, 8000b1a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b16:	6181      	str	r1, [r0, #24]
 8000b18:	4770      	bx	lr
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	e7fb      	b.n	8000b16 <HAL_GPIO_WritePin+0x2>
	...

08000b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b24:	4604      	mov	r4, r0
 8000b26:	b918      	cbnz	r0, 8000b30 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000b28:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b2a:	b002      	add	sp, #8
 8000b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b30:	6803      	ldr	r3, [r0, #0]
 8000b32:	07dd      	lsls	r5, r3, #31
 8000b34:	d410      	bmi.n	8000b58 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	0798      	lsls	r0, r3, #30
 8000b3a:	d458      	bmi.n	8000bee <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	071a      	lsls	r2, r3, #28
 8000b40:	f100 809a 	bmi.w	8000c78 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	075b      	lsls	r3, r3, #29
 8000b48:	f100 80b8 	bmi.w	8000cbc <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b4c:	69a2      	ldr	r2, [r4, #24]
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	f040 8119 	bne.w	8000d86 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000b54:	2000      	movs	r0, #0
 8000b56:	e7e8      	b.n	8000b2a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b58:	4ba6      	ldr	r3, [pc, #664]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	f002 020c 	and.w	r2, r2, #12
 8000b60:	2a04      	cmp	r2, #4
 8000b62:	d007      	beq.n	8000b74 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b6a:	2a08      	cmp	r2, #8
 8000b6c:	d10a      	bne.n	8000b84 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	0259      	lsls	r1, r3, #9
 8000b72:	d507      	bpl.n	8000b84 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b74:	4b9f      	ldr	r3, [pc, #636]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	039a      	lsls	r2, r3, #14
 8000b7a:	d5dc      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x16>
 8000b7c:	6863      	ldr	r3, [r4, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1d9      	bne.n	8000b36 <HAL_RCC_OscConfig+0x16>
 8000b82:	e7d1      	b.n	8000b28 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b84:	6863      	ldr	r3, [r4, #4]
 8000b86:	4d9b      	ldr	r5, [pc, #620]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8c:	d111      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x92>
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b96:	f7ff fcd1 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9a:	4d96      	ldr	r5, [pc, #600]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000b9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9e:	682b      	ldr	r3, [r5, #0]
 8000ba0:	039b      	lsls	r3, r3, #14
 8000ba2:	d4c8      	bmi.n	8000b36 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ba4:	f7ff fcca 	bl	800053c <HAL_GetTick>
 8000ba8:	1b80      	subs	r0, r0, r6
 8000baa:	2864      	cmp	r0, #100	; 0x64
 8000bac:	d9f7      	bls.n	8000b9e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000bae:	2003      	movs	r0, #3
 8000bb0:	e7bb      	b.n	8000b2a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bb6:	d104      	bne.n	8000bc2 <HAL_RCC_OscConfig+0xa2>
 8000bb8:	682b      	ldr	r3, [r5, #0]
 8000bba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bbe:	602b      	str	r3, [r5, #0]
 8000bc0:	e7e5      	b.n	8000b8e <HAL_RCC_OscConfig+0x6e>
 8000bc2:	682a      	ldr	r2, [r5, #0]
 8000bc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bc8:	602a      	str	r2, [r5, #0]
 8000bca:	682a      	ldr	r2, [r5, #0]
 8000bcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000bd0:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1df      	bne.n	8000b96 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000bd6:	f7ff fcb1 	bl	800053c <HAL_GetTick>
 8000bda:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bdc:	682b      	ldr	r3, [r5, #0]
 8000bde:	039f      	lsls	r7, r3, #14
 8000be0:	d5a9      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be2:	f7ff fcab 	bl	800053c <HAL_GetTick>
 8000be6:	1b80      	subs	r0, r0, r6
 8000be8:	2864      	cmp	r0, #100	; 0x64
 8000bea:	d9f7      	bls.n	8000bdc <HAL_RCC_OscConfig+0xbc>
 8000bec:	e7df      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bee:	4b81      	ldr	r3, [pc, #516]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	f012 0f0c 	tst.w	r2, #12
 8000bf6:	d007      	beq.n	8000c08 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bfe:	2a08      	cmp	r2, #8
 8000c00:	d111      	bne.n	8000c26 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	025e      	lsls	r6, r3, #9
 8000c06:	d40e      	bmi.n	8000c26 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c08:	4b7a      	ldr	r3, [pc, #488]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	0795      	lsls	r5, r2, #30
 8000c0e:	d502      	bpl.n	8000c16 <HAL_RCC_OscConfig+0xf6>
 8000c10:	68e2      	ldr	r2, [r4, #12]
 8000c12:	2a01      	cmp	r2, #1
 8000c14:	d188      	bne.n	8000b28 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	6921      	ldr	r1, [r4, #16]
 8000c1a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000c1e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000c22:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c24:	e78a      	b.n	8000b3c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c26:	68e2      	ldr	r2, [r4, #12]
 8000c28:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <HAL_RCC_OscConfig+0x2d8>)
 8000c2a:	b1b2      	cbz	r2, 8000c5a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c30:	f7ff fc84 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c34:	4d6f      	ldr	r5, [pc, #444]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000c36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c38:	682b      	ldr	r3, [r5, #0]
 8000c3a:	0798      	lsls	r0, r3, #30
 8000c3c:	d507      	bpl.n	8000c4e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c3e:	682b      	ldr	r3, [r5, #0]
 8000c40:	6922      	ldr	r2, [r4, #16]
 8000c42:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c46:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c4a:	602b      	str	r3, [r5, #0]
 8000c4c:	e776      	b.n	8000b3c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fc75 	bl	800053c <HAL_GetTick>
 8000c52:	1b80      	subs	r0, r0, r6
 8000c54:	2802      	cmp	r0, #2
 8000c56:	d9ef      	bls.n	8000c38 <HAL_RCC_OscConfig+0x118>
 8000c58:	e7a9      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000c5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fc6e 	bl	800053c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c60:	4d64      	ldr	r5, [pc, #400]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000c62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c64:	682b      	ldr	r3, [r5, #0]
 8000c66:	0799      	lsls	r1, r3, #30
 8000c68:	f57f af68 	bpl.w	8000b3c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c6c:	f7ff fc66 	bl	800053c <HAL_GetTick>
 8000c70:	1b80      	subs	r0, r0, r6
 8000c72:	2802      	cmp	r0, #2
 8000c74:	d9f6      	bls.n	8000c64 <HAL_RCC_OscConfig+0x144>
 8000c76:	e79a      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c78:	6962      	ldr	r2, [r4, #20]
 8000c7a:	4b60      	ldr	r3, [pc, #384]	; (8000dfc <HAL_RCC_OscConfig+0x2dc>)
 8000c7c:	b17a      	cbz	r2, 8000c9e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c82:	f7ff fc5b 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c86:	4d5b      	ldr	r5, [pc, #364]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000c88:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c8a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c8c:	079f      	lsls	r7, r3, #30
 8000c8e:	f53f af59 	bmi.w	8000b44 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c92:	f7ff fc53 	bl	800053c <HAL_GetTick>
 8000c96:	1b80      	subs	r0, r0, r6
 8000c98:	2802      	cmp	r0, #2
 8000c9a:	d9f6      	bls.n	8000c8a <HAL_RCC_OscConfig+0x16a>
 8000c9c:	e787      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000c9e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ca0:	f7ff fc4c 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ca4:	4d53      	ldr	r5, [pc, #332]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000ca6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ca8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000caa:	0798      	lsls	r0, r3, #30
 8000cac:	f57f af4a 	bpl.w	8000b44 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cb0:	f7ff fc44 	bl	800053c <HAL_GetTick>
 8000cb4:	1b80      	subs	r0, r0, r6
 8000cb6:	2802      	cmp	r0, #2
 8000cb8:	d9f6      	bls.n	8000ca8 <HAL_RCC_OscConfig+0x188>
 8000cba:	e778      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cbc:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000cc4:	d128      	bne.n	8000d18 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	9201      	str	r2, [sp, #4]
 8000cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000cce:	641a      	str	r2, [r3, #64]	; 0x40
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	9301      	str	r3, [sp, #4]
 8000cd8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cda:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cdc:	4d48      	ldr	r5, [pc, #288]	; (8000e00 <HAL_RCC_OscConfig+0x2e0>)
 8000cde:	682b      	ldr	r3, [r5, #0]
 8000ce0:	05d9      	lsls	r1, r3, #23
 8000ce2:	d51b      	bpl.n	8000d1c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce4:	68a3      	ldr	r3, [r4, #8]
 8000ce6:	4d43      	ldr	r5, [pc, #268]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d127      	bne.n	8000d3c <HAL_RCC_OscConfig+0x21c>
 8000cec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000cf4:	f7ff fc22 	bl	800053c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf8:	4d3e      	ldr	r5, [pc, #248]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000cfa:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cfc:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d02:	079b      	lsls	r3, r3, #30
 8000d04:	d539      	bpl.n	8000d7a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	f43f af20 	beq.w	8000b4c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d0c:	4a39      	ldr	r2, [pc, #228]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000d0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	e719      	b.n	8000b4c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000d18:	2600      	movs	r6, #0
 8000d1a:	e7df      	b.n	8000cdc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d22:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000d24:	f7ff fc0a 	bl	800053c <HAL_GetTick>
 8000d28:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d2a:	682b      	ldr	r3, [r5, #0]
 8000d2c:	05da      	lsls	r2, r3, #23
 8000d2e:	d4d9      	bmi.n	8000ce4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d30:	f7ff fc04 	bl	800053c <HAL_GetTick>
 8000d34:	1bc0      	subs	r0, r0, r7
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9f7      	bls.n	8000d2a <HAL_RCC_OscConfig+0x20a>
 8000d3a:	e738      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d104      	bne.n	8000d4a <HAL_RCC_OscConfig+0x22a>
 8000d40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	672b      	str	r3, [r5, #112]	; 0x70
 8000d48:	e7d0      	b.n	8000cec <HAL_RCC_OscConfig+0x1cc>
 8000d4a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d4c:	f022 0201 	bic.w	r2, r2, #1
 8000d50:	672a      	str	r2, [r5, #112]	; 0x70
 8000d52:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d54:	f022 0204 	bic.w	r2, r2, #4
 8000d58:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1ca      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000d5e:	f7ff fbed 	bl	800053c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d62:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d66:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d6a:	0798      	lsls	r0, r3, #30
 8000d6c:	d5cb      	bpl.n	8000d06 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fbe5 	bl	800053c <HAL_GetTick>
 8000d72:	1bc0      	subs	r0, r0, r7
 8000d74:	4540      	cmp	r0, r8
 8000d76:	d9f7      	bls.n	8000d68 <HAL_RCC_OscConfig+0x248>
 8000d78:	e719      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d7a:	f7ff fbdf 	bl	800053c <HAL_GetTick>
 8000d7e:	1bc0      	subs	r0, r0, r7
 8000d80:	4540      	cmp	r0, r8
 8000d82:	d9bd      	bls.n	8000d00 <HAL_RCC_OscConfig+0x1e0>
 8000d84:	e713      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d86:	4d1b      	ldr	r5, [pc, #108]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
 8000d88:	68ab      	ldr	r3, [r5, #8]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	f43f aeca 	beq.w	8000b28 <HAL_RCC_OscConfig+0x8>
 8000d94:	4e1b      	ldr	r6, [pc, #108]	; (8000e04 <HAL_RCC_OscConfig+0x2e4>)
 8000d96:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d98:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d9a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d9c:	d134      	bne.n	8000e08 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fbcd 	bl	800053c <HAL_GetTick>
 8000da2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	0199      	lsls	r1, r3, #6
 8000da8:	d41e      	bmi.n	8000de8 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000daa:	6a22      	ldr	r2, [r4, #32]
 8000dac:	69e3      	ldr	r3, [r4, #28]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000db2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000db6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000db8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000dbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dbe:	4c0d      	ldr	r4, [pc, #52]	; (8000df4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000dc0:	0852      	lsrs	r2, r2, #1
 8000dc2:	3a01      	subs	r2, #1
 8000dc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dca:	2301      	movs	r3, #1
 8000dcc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000dce:	f7ff fbb5 	bl	800053c <HAL_GetTick>
 8000dd2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	019a      	lsls	r2, r3, #6
 8000dd8:	f53f aebc 	bmi.w	8000b54 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ddc:	f7ff fbae 	bl	800053c <HAL_GetTick>
 8000de0:	1b40      	subs	r0, r0, r5
 8000de2:	2802      	cmp	r0, #2
 8000de4:	d9f6      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x2b4>
 8000de6:	e6e2      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de8:	f7ff fba8 	bl	800053c <HAL_GetTick>
 8000dec:	1bc0      	subs	r0, r0, r7
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9d8      	bls.n	8000da4 <HAL_RCC_OscConfig+0x284>
 8000df2:	e6dc      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
 8000df4:	40023800 	.word	0x40023800
 8000df8:	42470000 	.word	0x42470000
 8000dfc:	42470e80 	.word	0x42470e80
 8000e00:	40007000 	.word	0x40007000
 8000e04:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000e08:	f7ff fb98 	bl	800053c <HAL_GetTick>
 8000e0c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e0e:	682b      	ldr	r3, [r5, #0]
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	f57f ae9f 	bpl.w	8000b54 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e16:	f7ff fb91 	bl	800053c <HAL_GetTick>
 8000e1a:	1b00      	subs	r0, r0, r4
 8000e1c:	2802      	cmp	r0, #2
 8000e1e:	d9f6      	bls.n	8000e0e <HAL_RCC_OscConfig+0x2ee>
 8000e20:	e6c5      	b.n	8000bae <HAL_RCC_OscConfig+0x8e>
 8000e22:	bf00      	nop

08000e24 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e24:	4913      	ldr	r1, [pc, #76]	; (8000e74 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e26:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e28:	688b      	ldr	r3, [r1, #8]
 8000e2a:	f003 030c 	and.w	r3, r3, #12
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	d003      	beq.n	8000e3a <HAL_RCC_GetSysClockFreq+0x16>
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d003      	beq.n	8000e3e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e36:	4810      	ldr	r0, [pc, #64]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e38:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000e3a:	4810      	ldr	r0, [pc, #64]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x58>)
 8000e3c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e3e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e40:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e42:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e44:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e48:	bf14      	ite	ne
 8000e4a:	480c      	ldrne	r0, [pc, #48]	; (8000e7c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e4c:	480a      	ldreq	r0, [pc, #40]	; (8000e78 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e4e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e52:	bf18      	it	ne
 8000e54:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e5a:	fba1 0100 	umull	r0, r1, r1, r0
 8000e5e:	f7ff f9bf 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000e6e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e72:	bd08      	pop	{r3, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	00f42400 	.word	0x00f42400
 8000e7c:	017d7840 	.word	0x017d7840

08000e80 <HAL_RCC_ClockConfig>:
{
 8000e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e84:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000e86:	4604      	mov	r4, r0
 8000e88:	b910      	cbnz	r0, 8000e90 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e90:	4b44      	ldr	r3, [pc, #272]	; (8000fa4 <HAL_RCC_ClockConfig+0x124>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	f002 020f 	and.w	r2, r2, #15
 8000e98:	428a      	cmp	r2, r1
 8000e9a:	d328      	bcc.n	8000eee <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e9c:	6821      	ldr	r1, [r4, #0]
 8000e9e:	078f      	lsls	r7, r1, #30
 8000ea0:	d42d      	bmi.n	8000efe <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ea2:	07c8      	lsls	r0, r1, #31
 8000ea4:	d440      	bmi.n	8000f28 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <HAL_RCC_ClockConfig+0x124>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	f002 020f 	and.w	r2, r2, #15
 8000eae:	4295      	cmp	r5, r2
 8000eb0:	d366      	bcc.n	8000f80 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb2:	6822      	ldr	r2, [r4, #0]
 8000eb4:	0751      	lsls	r1, r2, #29
 8000eb6:	d46c      	bmi.n	8000f92 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000eb8:	0713      	lsls	r3, r2, #28
 8000eba:	d507      	bpl.n	8000ecc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ebc:	4a3a      	ldr	r2, [pc, #232]	; (8000fa8 <HAL_RCC_ClockConfig+0x128>)
 8000ebe:	6921      	ldr	r1, [r4, #16]
 8000ec0:	6893      	ldr	r3, [r2, #8]
 8000ec2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ec6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ecc:	f7ff ffaa 	bl	8000e24 <HAL_RCC_GetSysClockFreq>
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_RCC_ClockConfig+0x128>)
 8000ed2:	4a36      	ldr	r2, [pc, #216]	; (8000fac <HAL_RCC_ClockConfig+0x12c>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	40d8      	lsrs	r0, r3
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <HAL_RCC_ClockConfig+0x130>)
 8000ee0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f002 fe2a 	bl	8003b3c <HAL_InitTick>
  return HAL_OK;
 8000ee8:	2000      	movs	r0, #0
 8000eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eee:	b2ca      	uxtb	r2, r1
 8000ef0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	d1c6      	bne.n	8000e8a <HAL_RCC_ClockConfig+0xa>
 8000efc:	e7ce      	b.n	8000e9c <HAL_RCC_ClockConfig+0x1c>
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f00:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f04:	bf1e      	ittt	ne
 8000f06:	689a      	ldrne	r2, [r3, #8]
 8000f08:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000f0c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f0e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f10:	bf42      	ittt	mi
 8000f12:	689a      	ldrmi	r2, [r3, #8]
 8000f14:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000f18:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	68a0      	ldr	r0, [r4, #8]
 8000f1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f22:	4302      	orrs	r2, r0
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	e7bc      	b.n	8000ea2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f28:	6862      	ldr	r2, [r4, #4]
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_RCC_ClockConfig+0x128>)
 8000f2c:	2a01      	cmp	r2, #1
 8000f2e:	d11d      	bne.n	8000f6c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f36:	d0a8      	beq.n	8000e8a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f38:	4e1b      	ldr	r6, [pc, #108]	; (8000fa8 <HAL_RCC_ClockConfig+0x128>)
 8000f3a:	68b3      	ldr	r3, [r6, #8]
 8000f3c:	f023 0303 	bic.w	r3, r3, #3
 8000f40:	4313      	orrs	r3, r2
 8000f42:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f44:	f7ff fafa 	bl	800053c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f48:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f4c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f4e:	68b3      	ldr	r3, [r6, #8]
 8000f50:	6862      	ldr	r2, [r4, #4]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f5a:	d0a4      	beq.n	8000ea6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5c:	f7ff faee 	bl	800053c <HAL_GetTick>
 8000f60:	1bc0      	subs	r0, r0, r7
 8000f62:	4540      	cmp	r0, r8
 8000f64:	d9f3      	bls.n	8000f4e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000f66:	2003      	movs	r0, #3
}
 8000f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f6c:	1e91      	subs	r1, r2, #2
 8000f6e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f70:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f72:	d802      	bhi.n	8000f7a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f78:	e7dd      	b.n	8000f36 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7a:	f013 0f02 	tst.w	r3, #2
 8000f7e:	e7da      	b.n	8000f36 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f80:	b2ea      	uxtb	r2, r5
 8000f82:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	429d      	cmp	r5, r3
 8000f8c:	f47f af7d 	bne.w	8000e8a <HAL_RCC_ClockConfig+0xa>
 8000f90:	e78f      	b.n	8000eb2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f92:	4905      	ldr	r1, [pc, #20]	; (8000fa8 <HAL_RCC_ClockConfig+0x128>)
 8000f94:	68e0      	ldr	r0, [r4, #12]
 8000f96:	688b      	ldr	r3, [r1, #8]
 8000f98:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000f9c:	4303      	orrs	r3, r0
 8000f9e:	608b      	str	r3, [r1, #8]
 8000fa0:	e78a      	b.n	8000eb8 <HAL_RCC_ClockConfig+0x38>
 8000fa2:	bf00      	nop
 8000fa4:	40023c00 	.word	0x40023c00
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	08003d5a 	.word	0x08003d5a
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fc2:	6810      	ldr	r0, [r2, #0]
}
 8000fc4:	40d8      	lsrs	r0, r3
 8000fc6:	4770      	bx	lr
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	08003d6a 	.word	0x08003d6a
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_RCC_GetPCLK2Freq+0x18>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000fe2:	6810      	ldr	r0, [r2, #0]
}
 8000fe4:	40d8      	lsrs	r0, r3
 8000fe6:	4770      	bx	lr
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	08003d6a 	.word	0x08003d6a
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_RCC_GetClockConfig+0x34>)
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	f002 0203 	and.w	r2, r2, #3
 8001000:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001008:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001010:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800101a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_RCC_GetClockConfig+0x38>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	600b      	str	r3, [r1, #0]
 8001026:	4770      	bx	lr
 8001028:	40023800 	.word	0x40023800
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_TIM_Base_MspInit>:
 8001030:	4770      	bx	lr

08001032 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001032:	6803      	ldr	r3, [r0, #0]
 8001034:	68da      	ldr	r2, [r3, #12]
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001042:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001044:	bf1e      	ittt	ne
 8001046:	681a      	ldrne	r2, [r3, #0]
 8001048:	f042 0201 	orrne.w	r2, r2, #1
 800104c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800104e:	2000      	movs	r0, #0
 8001050:	4770      	bx	lr

08001052 <HAL_TIM_OC_DelayElapsedCallback>:
 8001052:	4770      	bx	lr

08001054 <HAL_TIM_IC_CaptureCallback>:
 8001054:	4770      	bx	lr

08001056 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001056:	4770      	bx	lr

08001058 <HAL_TIM_TriggerCallback>:
 8001058:	4770      	bx	lr

0800105a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800105a:	6803      	ldr	r3, [r0, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	0791      	lsls	r1, r2, #30
{
 8001060:	b510      	push	{r4, lr}
 8001062:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001064:	d50e      	bpl.n	8001084 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	0792      	lsls	r2, r2, #30
 800106a:	d50b      	bpl.n	8001084 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800106c:	f06f 0202 	mvn.w	r2, #2
 8001070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001072:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001074:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001076:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001078:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800107a:	d077      	beq.n	800116c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800107c:	f7ff ffea 	bl	8001054 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001080:	2300      	movs	r3, #0
 8001082:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	0750      	lsls	r0, r2, #29
 800108a:	d510      	bpl.n	80010ae <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	0751      	lsls	r1, r2, #29
 8001090:	d50d      	bpl.n	80010ae <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001092:	f06f 0204 	mvn.w	r2, #4
 8001096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001098:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800109a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800109c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010a0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010a4:	d068      	beq.n	8001178 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80010a6:	f7ff ffd5 	bl	8001054 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010aa:	2300      	movs	r3, #0
 80010ac:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	691a      	ldr	r2, [r3, #16]
 80010b2:	0712      	lsls	r2, r2, #28
 80010b4:	d50f      	bpl.n	80010d6 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	0710      	lsls	r0, r2, #28
 80010ba:	d50c      	bpl.n	80010d6 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010bc:	f06f 0208 	mvn.w	r2, #8
 80010c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010c2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010c4:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010c6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010c8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010cc:	d05a      	beq.n	8001184 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80010ce:	f7ff ffc1 	bl	8001054 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010d2:	2300      	movs	r3, #0
 80010d4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	06d2      	lsls	r2, r2, #27
 80010dc:	d510      	bpl.n	8001100 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	06d0      	lsls	r0, r2, #27
 80010e2:	d50d      	bpl.n	8001100 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010e4:	f06f 0210 	mvn.w	r2, #16
 80010e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010ea:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010ec:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010ee:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010f2:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010f4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010f6:	d04b      	beq.n	8001190 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80010f8:	f7ff ffac 	bl	8001054 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010fc:	2300      	movs	r3, #0
 80010fe:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	691a      	ldr	r2, [r3, #16]
 8001104:	07d1      	lsls	r1, r2, #31
 8001106:	d508      	bpl.n	800111a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	07d2      	lsls	r2, r2, #31
 800110c:	d505      	bpl.n	800111a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800110e:	f06f 0201 	mvn.w	r2, #1
 8001112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001114:	4620      	mov	r0, r4
 8001116:	f002 fc67 	bl	80039e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	0610      	lsls	r0, r2, #24
 8001120:	d508      	bpl.n	8001134 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	0611      	lsls	r1, r2, #24
 8001126:	d505      	bpl.n	8001134 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001128:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800112c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800112e:	4620      	mov	r0, r4
 8001130:	f000 f8b7 	bl	80012a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	0652      	lsls	r2, r2, #25
 800113a:	d508      	bpl.n	800114e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	0650      	lsls	r0, r2, #25
 8001140:	d505      	bpl.n	800114e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001142:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff ff85 	bl	8001058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	0691      	lsls	r1, r2, #26
 8001154:	d522      	bpl.n	800119c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	0692      	lsls	r2, r2, #26
 800115a:	d51f      	bpl.n	800119c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800115c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001160:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001162:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001168:	f000 b89a 	b.w	80012a0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800116c:	f7ff ff71 	bl	8001052 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ff70 	bl	8001056 <HAL_TIM_PWM_PulseFinishedCallback>
 8001176:	e783      	b.n	8001080 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001178:	f7ff ff6b 	bl	8001052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800117c:	4620      	mov	r0, r4
 800117e:	f7ff ff6a 	bl	8001056 <HAL_TIM_PWM_PulseFinishedCallback>
 8001182:	e792      	b.n	80010aa <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001184:	f7ff ff65 	bl	8001052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001188:	4620      	mov	r0, r4
 800118a:	f7ff ff64 	bl	8001056 <HAL_TIM_PWM_PulseFinishedCallback>
 800118e:	e7a0      	b.n	80010d2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001190:	f7ff ff5f 	bl	8001052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff ff5e 	bl	8001056 <HAL_TIM_PWM_PulseFinishedCallback>
 800119a:	e7af      	b.n	80010fc <HAL_TIM_IRQHandler+0xa2>
 800119c:	bd10      	pop	{r4, pc}
	...

080011a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011a0:	4a30      	ldr	r2, [pc, #192]	; (8001264 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80011a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011a4:	4290      	cmp	r0, r2
 80011a6:	d012      	beq.n	80011ce <TIM_Base_SetConfig+0x2e>
 80011a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011ac:	d00f      	beq.n	80011ce <TIM_Base_SetConfig+0x2e>
 80011ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011b2:	4290      	cmp	r0, r2
 80011b4:	d00b      	beq.n	80011ce <TIM_Base_SetConfig+0x2e>
 80011b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ba:	4290      	cmp	r0, r2
 80011bc:	d007      	beq.n	80011ce <TIM_Base_SetConfig+0x2e>
 80011be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011c2:	4290      	cmp	r0, r2
 80011c4:	d003      	beq.n	80011ce <TIM_Base_SetConfig+0x2e>
 80011c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80011ca:	4290      	cmp	r0, r2
 80011cc:	d119      	bne.n	8001202 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80011ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011d4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011d6:	4a23      	ldr	r2, [pc, #140]	; (8001264 <TIM_Base_SetConfig+0xc4>)
 80011d8:	4290      	cmp	r0, r2
 80011da:	d029      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 80011dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011e0:	d026      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 80011e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011e6:	4290      	cmp	r0, r2
 80011e8:	d022      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 80011ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ee:	4290      	cmp	r0, r2
 80011f0:	d01e      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 80011f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011f6:	4290      	cmp	r0, r2
 80011f8:	d01a      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 80011fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80011fe:	4290      	cmp	r0, r2
 8001200:	d016      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <TIM_Base_SetConfig+0xc8>)
 8001204:	4290      	cmp	r0, r2
 8001206:	d013      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 8001208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800120c:	4290      	cmp	r0, r2
 800120e:	d00f      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 8001210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001214:	4290      	cmp	r0, r2
 8001216:	d00b      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 8001218:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800121c:	4290      	cmp	r0, r2
 800121e:	d007      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 8001220:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001224:	4290      	cmp	r0, r2
 8001226:	d003      	beq.n	8001230 <TIM_Base_SetConfig+0x90>
 8001228:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122c:	4290      	cmp	r0, r2
 800122e:	d103      	bne.n	8001238 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001230:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001236:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001238:	694a      	ldr	r2, [r1, #20]
 800123a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800123e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001240:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001242:	688b      	ldr	r3, [r1, #8]
 8001244:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001246:	680b      	ldr	r3, [r1, #0]
 8001248:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <TIM_Base_SetConfig+0xc4>)
 800124c:	4298      	cmp	r0, r3
 800124e:	d003      	beq.n	8001258 <TIM_Base_SetConfig+0xb8>
 8001250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001254:	4298      	cmp	r0, r3
 8001256:	d101      	bne.n	800125c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001258:	690b      	ldr	r3, [r1, #16]
 800125a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800125c:	2301      	movs	r3, #1
 800125e:	6143      	str	r3, [r0, #20]
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40010000 	.word	0x40010000
 8001268:	40014000 	.word	0x40014000

0800126c <HAL_TIM_Base_Init>:
{
 800126c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800126e:	4604      	mov	r4, r0
 8001270:	b1a0      	cbz	r0, 800129c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001272:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001276:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800127a:	b91b      	cbnz	r3, 8001284 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800127c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001280:	f7ff fed6 	bl	8001030 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001284:	2302      	movs	r3, #2
 8001286:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800128a:	6820      	ldr	r0, [r4, #0]
 800128c:	1d21      	adds	r1, r4, #4
 800128e:	f7ff ff87 	bl	80011a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001292:	2301      	movs	r3, #1
 8001294:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001298:	2000      	movs	r0, #0
 800129a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800129c:	2001      	movs	r0, #1
}
 800129e:	bd10      	pop	{r4, pc}

080012a0 <HAL_TIMEx_CommutCallback>:
 80012a0:	4770      	bx	lr

080012a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80012a2:	4770      	bx	lr

080012a4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012a4:	6803      	ldr	r3, [r0, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80012ac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012ae:	695a      	ldr	r2, [r3, #20]
 80012b0:	f022 0201 	bic.w	r2, r2, #1
 80012b4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80012b6:	2320      	movs	r3, #32
 80012b8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80012bc:	4770      	bx	lr
	...

080012c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012c4:	6806      	ldr	r6, [r0, #0]
 80012c6:	68c2      	ldr	r2, [r0, #12]
 80012c8:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012ca:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012d0:	4313      	orrs	r3, r2
 80012d2:	6133      	str	r3, [r6, #16]
{
 80012d4:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012d6:	6883      	ldr	r3, [r0, #8]
 80012d8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80012da:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012dc:	4303      	orrs	r3, r0
 80012de:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80012e0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012e4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80012e6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012ea:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012f0:	6973      	ldr	r3, [r6, #20]
 80012f2:	69a2      	ldr	r2, [r4, #24]
 80012f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012f8:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012fa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012fe:	6173      	str	r3, [r6, #20]
 8001300:	4b7a      	ldr	r3, [pc, #488]	; (80014ec <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001302:	d17c      	bne.n	80013fe <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001304:	429e      	cmp	r6, r3
 8001306:	d003      	beq.n	8001310 <UART_SetConfig+0x50>
 8001308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800130c:	429e      	cmp	r6, r3
 800130e:	d144      	bne.n	800139a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001310:	f7ff fe60 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001314:	2519      	movs	r5, #25
 8001316:	fb05 f300 	mul.w	r3, r5, r0
 800131a:	6860      	ldr	r0, [r4, #4]
 800131c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001320:	0040      	lsls	r0, r0, #1
 8001322:	fbb3 f3f0 	udiv	r3, r3, r0
 8001326:	fbb3 f3f9 	udiv	r3, r3, r9
 800132a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800132e:	f7ff fe51 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001332:	6863      	ldr	r3, [r4, #4]
 8001334:	4368      	muls	r0, r5
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	fbb0 f7f3 	udiv	r7, r0, r3
 800133c:	f7ff fe4a 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001340:	6863      	ldr	r3, [r4, #4]
 8001342:	4368      	muls	r0, r5
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fbb0 f3f3 	udiv	r3, r0, r3
 800134a:	fbb3 f3f9 	udiv	r3, r3, r9
 800134e:	fb09 7313 	mls	r3, r9, r3, r7
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	3332      	adds	r3, #50	; 0x32
 8001356:	fbb3 f3f9 	udiv	r3, r3, r9
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001360:	f7ff fe38 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001364:	6862      	ldr	r2, [r4, #4]
 8001366:	4368      	muls	r0, r5
 8001368:	0052      	lsls	r2, r2, #1
 800136a:	fbb0 faf2 	udiv	sl, r0, r2
 800136e:	f7ff fe31 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001372:	6863      	ldr	r3, [r4, #4]
 8001374:	4368      	muls	r0, r5
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fbb0 f3f3 	udiv	r3, r0, r3
 800137c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001380:	fb09 a313 	mls	r3, r9, r3, sl
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	3332      	adds	r3, #50	; 0x32
 8001388:	fbb3 f3f9 	udiv	r3, r3, r9
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001392:	443b      	add	r3, r7
 8001394:	60b3      	str	r3, [r6, #8]
 8001396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800139a:	f7ff fe0b 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 800139e:	2519      	movs	r5, #25
 80013a0:	fb05 f300 	mul.w	r3, r5, r0
 80013a4:	6860      	ldr	r0, [r4, #4]
 80013a6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80013aa:	0040      	lsls	r0, r0, #1
 80013ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80013b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80013b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80013b8:	f7ff fdfc 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80013bc:	6863      	ldr	r3, [r4, #4]
 80013be:	4368      	muls	r0, r5
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fbb0 f7f3 	udiv	r7, r0, r3
 80013c6:	f7ff fdf5 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80013ca:	6863      	ldr	r3, [r4, #4]
 80013cc:	4368      	muls	r0, r5
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80013d8:	fb09 7313 	mls	r3, r9, r3, r7
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	3332      	adds	r3, #50	; 0x32
 80013e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80013ea:	f7ff fde3 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80013ee:	6862      	ldr	r2, [r4, #4]
 80013f0:	4368      	muls	r0, r5
 80013f2:	0052      	lsls	r2, r2, #1
 80013f4:	fbb0 faf2 	udiv	sl, r0, r2
 80013f8:	f7ff fddc 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80013fc:	e7b9      	b.n	8001372 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80013fe:	429e      	cmp	r6, r3
 8001400:	d002      	beq.n	8001408 <UART_SetConfig+0x148>
 8001402:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <UART_SetConfig+0x230>)
 8001404:	429e      	cmp	r6, r3
 8001406:	d140      	bne.n	800148a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001408:	f7ff fde4 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 800140c:	6867      	ldr	r7, [r4, #4]
 800140e:	2519      	movs	r5, #25
 8001410:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001414:	fb05 f300 	mul.w	r3, r5, r0
 8001418:	00bf      	lsls	r7, r7, #2
 800141a:	fbb3 f3f7 	udiv	r3, r3, r7
 800141e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001422:	011f      	lsls	r7, r3, #4
 8001424:	f7ff fdd6 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001428:	6863      	ldr	r3, [r4, #4]
 800142a:	4368      	muls	r0, r5
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	fbb0 f8f3 	udiv	r8, r0, r3
 8001432:	f7ff fdcf 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001436:	6863      	ldr	r3, [r4, #4]
 8001438:	4368      	muls	r0, r5
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001440:	fbb3 f3f9 	udiv	r3, r3, r9
 8001444:	fb09 8313 	mls	r3, r9, r3, r8
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	3332      	adds	r3, #50	; 0x32
 800144c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001450:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001454:	f7ff fdbe 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
 8001458:	6862      	ldr	r2, [r4, #4]
 800145a:	4368      	muls	r0, r5
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	fbb0 faf2 	udiv	sl, r0, r2
 8001462:	f7ff fdb7 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001466:	6863      	ldr	r3, [r4, #4]
 8001468:	4368      	muls	r0, r5
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001470:	fbb3 f3f9 	udiv	r3, r3, r9
 8001474:	fb09 a313 	mls	r3, r9, r3, sl
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	3332      	adds	r3, #50	; 0x32
 800147c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	ea43 0308 	orr.w	r3, r3, r8
 8001488:	e783      	b.n	8001392 <UART_SetConfig+0xd2>
 800148a:	f7ff fd93 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 800148e:	6867      	ldr	r7, [r4, #4]
 8001490:	2519      	movs	r5, #25
 8001492:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001496:	fb05 f300 	mul.w	r3, r5, r0
 800149a:	00bf      	lsls	r7, r7, #2
 800149c:	fbb3 f3f7 	udiv	r3, r3, r7
 80014a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80014a4:	011f      	lsls	r7, r3, #4
 80014a6:	f7ff fd85 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80014aa:	6863      	ldr	r3, [r4, #4]
 80014ac:	4368      	muls	r0, r5
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	fbb0 f8f3 	udiv	r8, r0, r3
 80014b4:	f7ff fd7e 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80014b8:	6863      	ldr	r3, [r4, #4]
 80014ba:	4368      	muls	r0, r5
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	fbb3 f3f9 	udiv	r3, r3, r9
 80014c6:	fb09 8313 	mls	r3, r9, r3, r8
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	3332      	adds	r3, #50	; 0x32
 80014ce:	fbb3 f3f9 	udiv	r3, r3, r9
 80014d2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80014d6:	f7ff fd6d 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80014da:	6862      	ldr	r2, [r4, #4]
 80014dc:	4368      	muls	r0, r5
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	fbb0 faf2 	udiv	sl, r0, r2
 80014e4:	f7ff fd66 	bl	8000fb4 <HAL_RCC_GetPCLK1Freq>
 80014e8:	e7bd      	b.n	8001466 <UART_SetConfig+0x1a6>
 80014ea:	bf00      	nop
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40011400 	.word	0x40011400

080014f4 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f6:	4604      	mov	r4, r0
 80014f8:	460e      	mov	r6, r1
 80014fa:	4617      	mov	r7, r2
 80014fc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80014fe:	6821      	ldr	r1, [r4, #0]
 8001500:	680b      	ldr	r3, [r1, #0]
 8001502:	ea36 0303 	bics.w	r3, r6, r3
 8001506:	d101      	bne.n	800150c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001508:	2000      	movs	r0, #0
}
 800150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800150c:	1c6b      	adds	r3, r5, #1
 800150e:	d0f7      	beq.n	8001500 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001510:	b995      	cbnz	r5, 8001538 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001512:	6823      	ldr	r3, [r4, #0]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800151a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001524:	2320      	movs	r3, #32
 8001526:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800152a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800152e:	2300      	movs	r3, #0
 8001530:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001534:	2003      	movs	r0, #3
 8001536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001538:	f7ff f800 	bl	800053c <HAL_GetTick>
 800153c:	1bc0      	subs	r0, r0, r7
 800153e:	4285      	cmp	r5, r0
 8001540:	d2dd      	bcs.n	80014fe <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001542:	e7e6      	b.n	8001512 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001544 <HAL_UART_Init>:
{
 8001544:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001546:	4604      	mov	r4, r0
 8001548:	b340      	cbz	r0, 800159c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800154a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800154e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001552:	b91b      	cbnz	r3, 800155c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001554:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001558:	f002 fa74 	bl	8003a44 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800155c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800155e:	2324      	movs	r3, #36	; 0x24
 8001560:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001564:	68d3      	ldr	r3, [r2, #12]
 8001566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800156a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800156c:	4620      	mov	r0, r4
 800156e:	f7ff fea7 	bl	80012c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800157a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800157c:	695a      	ldr	r2, [r3, #20]
 800157e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001582:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800158a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800158c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800158e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001590:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001592:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001596:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800159a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
}
 800159e:	bd10      	pop	{r4, pc}

080015a0 <HAL_UART_Transmit>:
{
 80015a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015a4:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80015a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015aa:	2b20      	cmp	r3, #32
{
 80015ac:	4604      	mov	r4, r0
 80015ae:	460d      	mov	r5, r1
 80015b0:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80015b2:	d14f      	bne.n	8001654 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 80015b4:	2900      	cmp	r1, #0
 80015b6:	d04a      	beq.n	800164e <HAL_UART_Transmit+0xae>
 80015b8:	2a00      	cmp	r2, #0
 80015ba:	d048      	beq.n	800164e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80015bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d047      	beq.n	8001654 <HAL_UART_Transmit+0xb4>
 80015c4:	2301      	movs	r3, #1
 80015c6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015ce:	2321      	movs	r3, #33	; 0x21
 80015d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80015d4:	f7fe ffb2 	bl	800053c <HAL_GetTick>
    huart->TxXferSize = Size;
 80015d8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80015dc:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80015de:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80015e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	b96b      	cbnz	r3, 8001604 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015e8:	463b      	mov	r3, r7
 80015ea:	4632      	mov	r2, r6
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff ff80 	bl	80014f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015f4:	b9b0      	cbnz	r0, 8001624 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 80015f6:	2320      	movs	r3, #32
 80015f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80015fc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001604:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001606:	3b01      	subs	r3, #1
 8001608:	b29b      	uxth	r3, r3
 800160a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800160c:	68a3      	ldr	r3, [r4, #8]
 800160e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001612:	4632      	mov	r2, r6
 8001614:	463b      	mov	r3, r7
 8001616:	f04f 0180 	mov.w	r1, #128	; 0x80
 800161a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800161c:	d10e      	bne.n	800163c <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800161e:	f7ff ff69 	bl	80014f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001622:	b110      	cbz	r0, 800162a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001624:	2003      	movs	r0, #3
 8001626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800162a:	882b      	ldrh	r3, [r5, #0]
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001632:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	b943      	cbnz	r3, 800164a <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8001638:	3502      	adds	r5, #2
 800163a:	e7d2      	b.n	80015e2 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800163c:	f7ff ff5a 	bl	80014f4 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001640:	2800      	cmp	r0, #0
 8001642:	d1ef      	bne.n	8001624 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	782a      	ldrb	r2, [r5, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	3501      	adds	r5, #1
 800164c:	e7c9      	b.n	80015e2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800164e:	2001      	movs	r0, #1
 8001650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001654:	2002      	movs	r0, #2
}
 8001656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800165c <HAL_UART_Receive_DMA>:
{
 800165c:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800165e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8001662:	2a20      	cmp	r2, #32
{
 8001664:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001666:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8001668:	d138      	bne.n	80016dc <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 800166a:	2900      	cmp	r1, #0
 800166c:	d034      	beq.n	80016d8 <HAL_UART_Receive_DMA+0x7c>
 800166e:	2b00      	cmp	r3, #0
 8001670:	d032      	beq.n	80016d8 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8001672:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8001676:	2a01      	cmp	r2, #1
 8001678:	d030      	beq.n	80016dc <HAL_UART_Receive_DMA+0x80>
 800167a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800167c:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 800167e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001682:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001684:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->pRxBuffPtr = pData;
 8001686:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001688:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800168a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800168e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <HAL_UART_Receive_DMA+0x84>)
 8001692:	63c2      	str	r2, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001694:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <HAL_UART_Receive_DMA+0x88>)
 8001698:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800169a:	4a13      	ldr	r2, [pc, #76]	; (80016e8 <HAL_UART_Receive_DMA+0x8c>)
 800169c:	64c2      	str	r2, [r0, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800169e:	6504      	str	r4, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80016a0:	460a      	mov	r2, r1
 80016a2:	1d31      	adds	r1, r6, #4
 80016a4:	f7ff f84c 	bl	8000740 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	9401      	str	r4, [sp, #4]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	9201      	str	r2, [sp, #4]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	9201      	str	r2, [sp, #4]
 80016b4:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80016b6:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 80016b8:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80016bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016c0:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016d0:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80016d2:	4620      	mov	r0, r4
}
 80016d4:	b002      	add	sp, #8
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80016d8:	2001      	movs	r0, #1
 80016da:	e7fb      	b.n	80016d4 <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 80016dc:	2002      	movs	r0, #2
 80016de:	e7f9      	b.n	80016d4 <HAL_UART_Receive_DMA+0x78>
 80016e0:	080016ef 	.word	0x080016ef
 80016e4:	080017a5 	.word	0x080017a5
 80016e8:	080017b1 	.word	0x080017b1

080016ec <HAL_UART_TxCpltCallback>:
 80016ec:	4770      	bx	lr

080016ee <UART_DMAReceiveCplt>:
{
 80016ee:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80016f0:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016f2:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80016fa:	d110      	bne.n	800171e <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 80016fc:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80016fe:	6813      	ldr	r3, [r2, #0]
 8001700:	68d9      	ldr	r1, [r3, #12]
 8001702:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001706:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001708:	6959      	ldr	r1, [r3, #20]
 800170a:	f021 0101 	bic.w	r1, r1, #1
 800170e:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001710:	6959      	ldr	r1, [r3, #20]
 8001712:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001716:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8001718:	2320      	movs	r3, #32
 800171a:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 800171e:	4610      	mov	r0, r2
 8001720:	f002 f956 	bl	80039d0 <HAL_UART_RxCpltCallback>
 8001724:	bd08      	pop	{r3, pc}

08001726 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001726:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800172a:	2b22      	cmp	r3, #34	; 0x22
{
 800172c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800172e:	d136      	bne.n	800179e <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001730:	6883      	ldr	r3, [r0, #8]
 8001732:	6901      	ldr	r1, [r0, #16]
 8001734:	6802      	ldr	r2, [r0, #0]
 8001736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800173a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800173c:	d123      	bne.n	8001786 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800173e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001740:	b9e9      	cbnz	r1, 800177e <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001746:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800174a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800174c:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800174e:	3c01      	subs	r4, #1
 8001750:	b2a4      	uxth	r4, r4
 8001752:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001754:	b98c      	cbnz	r4, 800177a <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001756:	6803      	ldr	r3, [r0, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	f022 0220 	bic.w	r2, r2, #32
 800175e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001766:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001768:	695a      	ldr	r2, [r3, #20]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001770:	2320      	movs	r3, #32
 8001772:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001776:	f002 f92b 	bl	80039d0 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800177a:	2000      	movs	r0, #0
}
 800177c:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	f823 2b01 	strh.w	r2, [r3], #1
 8001784:	e7e1      	b.n	800174a <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001786:	b921      	cbnz	r1, 8001792 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001788:	1c59      	adds	r1, r3, #1
 800178a:	6852      	ldr	r2, [r2, #4]
 800178c:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e7dc      	b.n	800174c <UART_Receive_IT+0x26>
 8001792:	6852      	ldr	r2, [r2, #4]
 8001794:	1c59      	adds	r1, r3, #1
 8001796:	6281      	str	r1, [r0, #40]	; 0x28
 8001798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800179c:	e7f7      	b.n	800178e <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800179e:	2002      	movs	r0, #2
 80017a0:	bd10      	pop	{r4, pc}

080017a2 <HAL_UART_RxHalfCpltCallback>:
 80017a2:	4770      	bx	lr

080017a4 <UART_DMARxHalfCplt>:
{
 80017a4:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80017a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80017a8:	f7ff fffb 	bl	80017a2 <HAL_UART_RxHalfCpltCallback>
 80017ac:	bd08      	pop	{r3, pc}

080017ae <HAL_UART_ErrorCallback>:
 80017ae:	4770      	bx	lr

080017b0 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017b0:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 80017b2:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80017b4:	680b      	ldr	r3, [r1, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80017b8:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 80017bc:	2821      	cmp	r0, #33	; 0x21
 80017be:	d10a      	bne.n	80017d6 <UART_DMAError+0x26>
 80017c0:	0612      	lsls	r2, r2, #24
 80017c2:	d508      	bpl.n	80017d6 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 80017c4:	2200      	movs	r2, #0
 80017c6:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80017ce:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80017d0:	2220      	movs	r2, #32
 80017d2:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017d6:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80017d8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80017dc:	2a22      	cmp	r2, #34	; 0x22
 80017de:	d106      	bne.n	80017ee <UART_DMAError+0x3e>
 80017e0:	065b      	lsls	r3, r3, #25
 80017e2:	d504      	bpl.n	80017ee <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80017e8:	4608      	mov	r0, r1
 80017ea:	f7ff fd5b 	bl	80012a4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80017ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80017f0:	f043 0310 	orr.w	r3, r3, #16
 80017f4:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80017f6:	4608      	mov	r0, r1
 80017f8:	f7ff ffd9 	bl	80017ae <HAL_UART_ErrorCallback>
 80017fc:	bd08      	pop	{r3, pc}
	...

08001800 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001800:	6803      	ldr	r3, [r0, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001804:	68d9      	ldr	r1, [r3, #12]
{
 8001806:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001808:	0716      	lsls	r6, r2, #28
{
 800180a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800180c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800180e:	d107      	bne.n	8001820 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001810:	0696      	lsls	r6, r2, #26
 8001812:	d55a      	bpl.n	80018ca <HAL_UART_IRQHandler+0xca>
 8001814:	068d      	lsls	r5, r1, #26
 8001816:	d558      	bpl.n	80018ca <HAL_UART_IRQHandler+0xca>
}
 8001818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800181c:	f7ff bf83 	b.w	8001726 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001820:	f015 0501 	ands.w	r5, r5, #1
 8001824:	d102      	bne.n	800182c <HAL_UART_IRQHandler+0x2c>
 8001826:	f411 7f90 	tst.w	r1, #288	; 0x120
 800182a:	d04e      	beq.n	80018ca <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800182c:	07d3      	lsls	r3, r2, #31
 800182e:	d505      	bpl.n	800183c <HAL_UART_IRQHandler+0x3c>
 8001830:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001832:	bf42      	ittt	mi
 8001834:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001836:	f043 0301 	orrmi.w	r3, r3, #1
 800183a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800183c:	0750      	lsls	r0, r2, #29
 800183e:	d504      	bpl.n	800184a <HAL_UART_IRQHandler+0x4a>
 8001840:	b11d      	cbz	r5, 800184a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800184a:	0793      	lsls	r3, r2, #30
 800184c:	d504      	bpl.n	8001858 <HAL_UART_IRQHandler+0x58>
 800184e:	b11d      	cbz	r5, 8001858 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001850:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001858:	0716      	lsls	r6, r2, #28
 800185a:	d504      	bpl.n	8001866 <HAL_UART_IRQHandler+0x66>
 800185c:	b11d      	cbz	r5, 8001866 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800185e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001866:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d066      	beq.n	800193a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800186c:	0695      	lsls	r5, r2, #26
 800186e:	d504      	bpl.n	800187a <HAL_UART_IRQHandler+0x7a>
 8001870:	0688      	lsls	r0, r1, #26
 8001872:	d502      	bpl.n	800187a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff ff56 	bl	8001726 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800187e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001880:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001882:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001884:	d402      	bmi.n	800188c <HAL_UART_IRQHandler+0x8c>
 8001886:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800188a:	d01a      	beq.n	80018c2 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800188c:	f7ff fd0a 	bl	80012a4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	0652      	lsls	r2, r2, #25
 8001896:	d510      	bpl.n	80018ba <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001898:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800189a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800189c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80018a2:	b150      	cbz	r0, 80018ba <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80018a4:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_UART_IRQHandler+0x13c>)
 80018a6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018a8:	f7fe ff88 	bl	80007bc <HAL_DMA_Abort_IT>
 80018ac:	2800      	cmp	r0, #0
 80018ae:	d044      	beq.n	800193a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80018b0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80018b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80018b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80018b8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80018ba:	4620      	mov	r0, r4
 80018bc:	f7ff ff77 	bl	80017ae <HAL_UART_ErrorCallback>
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80018c2:	f7ff ff74 	bl	80017ae <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80018c8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80018ca:	0616      	lsls	r6, r2, #24
 80018cc:	d527      	bpl.n	800191e <HAL_UART_IRQHandler+0x11e>
 80018ce:	060d      	lsls	r5, r1, #24
 80018d0:	d525      	bpl.n	800191e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80018d2:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80018d6:	2a21      	cmp	r2, #33	; 0x21
 80018d8:	d12f      	bne.n	800193a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018da:	68a2      	ldr	r2, [r4, #8]
 80018dc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80018e0:	6a22      	ldr	r2, [r4, #32]
 80018e2:	d117      	bne.n	8001914 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018e4:	8811      	ldrh	r1, [r2, #0]
 80018e6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80018ea:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80018ec:	6921      	ldr	r1, [r4, #16]
 80018ee:	b979      	cbnz	r1, 8001910 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80018f0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80018f2:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80018f4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80018f6:	3a01      	subs	r2, #1
 80018f8:	b292      	uxth	r2, r2
 80018fa:	84e2      	strh	r2, [r4, #38]	; 0x26
 80018fc:	b9ea      	cbnz	r2, 800193a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001904:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001910:	3201      	adds	r2, #1
 8001912:	e7ee      	b.n	80018f2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001914:	1c51      	adds	r1, r2, #1
 8001916:	6221      	str	r1, [r4, #32]
 8001918:	7812      	ldrb	r2, [r2, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	e7ea      	b.n	80018f4 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800191e:	0650      	lsls	r0, r2, #25
 8001920:	d50b      	bpl.n	800193a <HAL_UART_IRQHandler+0x13a>
 8001922:	064a      	lsls	r2, r1, #25
 8001924:	d509      	bpl.n	800193a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800192c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800192e:	2320      	movs	r3, #32
 8001930:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001934:	4620      	mov	r0, r4
 8001936:	f7ff fed9 	bl	80016ec <HAL_UART_TxCpltCallback>
 800193a:	bd70      	pop	{r4, r5, r6, pc}
 800193c:	08001941 	.word	0x08001941

08001940 <UART_DMAAbortOnError>:
{
 8001940:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001942:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001944:	2300      	movs	r3, #0
 8001946:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001948:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800194a:	f7ff ff30 	bl	80017ae <HAL_UART_ErrorCallback>
 800194e:	bd08      	pop	{r3, pc}

08001950 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001950:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8001954:	b113      	cbz	r3, 800195c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8001956:	f06f 0005 	mvn.w	r0, #5
 800195a:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800195c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f8      	bne.n	8001956 <osKernelInitialize+0x6>
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <osKernelInitialize+0x34>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	2802      	cmp	r0, #2
 800196a:	d106      	bne.n	800197a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800196c:	f3ef 8311 	mrs	r3, BASEPRI
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8001974:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8001978:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 800197a:	2800      	cmp	r0, #0
 800197c:	d1fa      	bne.n	8001974 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	4770      	bx	lr
 8001984:	20000284 	.word	0x20000284

08001988 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001988:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800198a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800198e:	b113      	cbz	r3, 8001996 <osKernelStart+0xe>
    stat = osErrorISR;
 8001990:	f06f 0005 	mvn.w	r0, #5
 8001994:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001996:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800199a:	2c00      	cmp	r4, #0
 800199c:	d1f8      	bne.n	8001990 <osKernelStart+0x8>
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <osKernelStart+0x3c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2a02      	cmp	r2, #2
 80019a4:	d106      	bne.n	80019b4 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019a6:	f3ef 8311 	mrs	r3, BASEPRI
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
      KernelState = osKernelRunning;
      vTaskStartScheduler();
      stat = osOK;
    } else {
      stat = osError;
 80019ae:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80019b2:	bd10      	pop	{r4, pc}
    if (KernelState == osKernelReady) {
 80019b4:	2a01      	cmp	r2, #1
 80019b6:	d1fa      	bne.n	80019ae <osKernelStart+0x26>
      KernelState = osKernelRunning;
 80019b8:	2202      	movs	r2, #2
 80019ba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80019bc:	f001 f98a 	bl	8002cd4 <vTaskStartScheduler>
      stat = osOK;
 80019c0:	4620      	mov	r0, r4
 80019c2:	bd10      	pop	{r4, pc}
 80019c4:	20000284 	.word	0x20000284

080019c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80019ce:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80019d0:	460b      	mov	r3, r1
  hTask = NULL;
 80019d2:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019d4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80019d8:	bb72      	cbnz	r2, 8001a38 <osThreadNew+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019da:	f3ef 8210 	mrs	r2, PRIMASK
 80019de:	bb5a      	cbnz	r2, 8001a38 <osThreadNew+0x70>
 80019e0:	4a28      	ldr	r2, [pc, #160]	; (8001a84 <osThreadNew+0xbc>)
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	2a02      	cmp	r2, #2
 80019e6:	d102      	bne.n	80019ee <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019e8:	f3ef 8211 	mrs	r2, BASEPRI
 80019ec:	bb22      	cbnz	r2, 8001a38 <osThreadNew+0x70>
 80019ee:	b318      	cbz	r0, 8001a38 <osThreadNew+0x70>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 80019f0:	2200      	movs	r2, #0
 80019f2:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 80019f6:	2c00      	cmp	r4, #0
 80019f8:	d03c      	beq.n	8001a74 <osThreadNew+0xac>
      if (attr->name != NULL) {
 80019fa:	6821      	ldr	r1, [r4, #0]
 80019fc:	b909      	cbnz	r1, 8001a02 <osThreadNew+0x3a>
    name  = &empty;
 80019fe:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8001a02:	69a5      	ldr	r5, [r4, #24]
 8001a04:	2d00      	cmp	r5, #0
 8001a06:	bf08      	it	eq
 8001a08:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001a0a:	1e6a      	subs	r2, r5, #1
 8001a0c:	2a37      	cmp	r2, #55	; 0x37
 8001a0e:	462f      	mov	r7, r5
 8001a10:	d835      	bhi.n	8001a7e <osThreadNew+0xb6>
 8001a12:	6862      	ldr	r2, [r4, #4]
 8001a14:	07d2      	lsls	r2, r2, #31
 8001a16:	d432      	bmi.n	8001a7e <osThreadNew+0xb6>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001a18:	6966      	ldr	r6, [r4, #20]
 8001a1a:	b186      	cbz	r6, 8001a3e <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001a1c:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a1e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8001a22:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8001a26:	f1be 0f00 	cmp.w	lr, #0
 8001a2a:	d00a      	beq.n	8001a42 <osThreadNew+0x7a>
 8001a2c:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 8001a30:	d902      	bls.n	8001a38 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a32:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001a34:	b104      	cbz	r4, 8001a38 <osThreadNew+0x70>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001a36:	b9ae      	cbnz	r6, 8001a64 <osThreadNew+0x9c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a38:	9805      	ldr	r0, [sp, #20]
}
 8001a3a:	b007      	add	sp, #28
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	e7ed      	b.n	8001a1e <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001a42:	f1bc 0f00 	cmp.w	ip, #0
 8001a46:	d1f7      	bne.n	8001a38 <osThreadNew+0x70>
      if (mem == 0) {
 8001a48:	6924      	ldr	r4, [r4, #16]
 8001a4a:	2c00      	cmp	r4, #0
 8001a4c:	d1f4      	bne.n	8001a38 <osThreadNew+0x70>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a4e:	ac05      	add	r4, sp, #20
 8001a50:	9401      	str	r4, [sp, #4]
 8001a52:	9700      	str	r7, [sp, #0]
 8001a54:	b292      	uxth	r2, r2
 8001a56:	f001 f910 	bl	8002c7a <xTaskCreate>
 8001a5a:	2801      	cmp	r0, #1
          hTask = NULL;
 8001a5c:	bf1c      	itt	ne
 8001a5e:	2300      	movne	r3, #0
 8001a60:	9305      	strne	r3, [sp, #20]
 8001a62:	e7e9      	b.n	8001a38 <osThreadNew+0x70>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a64:	f8cd e008 	str.w	lr, [sp, #8]
 8001a68:	9401      	str	r4, [sp, #4]
 8001a6a:	9500      	str	r5, [sp, #0]
 8001a6c:	f001 f8ce 	bl	8002c0c <xTaskCreateStatic>
 8001a70:	9005      	str	r0, [sp, #20]
 8001a72:	e7e1      	b.n	8001a38 <osThreadNew+0x70>
    prio  = (UBaseType_t)osPriorityNormal;
 8001a74:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 8001a76:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 8001a78:	f10d 0113 	add.w	r1, sp, #19
 8001a7c:	e7e7      	b.n	8001a4e <osThreadNew+0x86>
        return (NULL);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	e7db      	b.n	8001a3a <osThreadNew+0x72>
 8001a82:	bf00      	nop
 8001a84:	20000284 	.word	0x20000284

08001a88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001a88:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a8a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a8e:	b113      	cbz	r3, 8001a96 <osDelay+0xe>
    stat = osErrorISR;
 8001a90:	f06f 0005 	mvn.w	r0, #5
 8001a94:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a96:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f8      	bne.n	8001a90 <osDelay+0x8>
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <osDelay+0x30>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d103      	bne.n	8001aae <osDelay+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001aa6:	f3ef 8311 	mrs	r3, BASEPRI
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <osDelay+0x8>
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8001aae:	b110      	cbz	r0, 8001ab6 <osDelay+0x2e>
      vTaskDelay(ticks);
 8001ab0:	f001 fa66 	bl	8002f80 <vTaskDelay>
    stat = osOK;
 8001ab4:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8001ab6:	bd08      	pop	{r3, pc}
 8001ab8:	20000284 	.word	0x20000284

08001abc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001abc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001abe:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ac0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001ac4:	b11b      	cbz	r3, 8001ace <osMessageQueueNew+0x12>
  hQueue = NULL;
 8001ac6:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8001ac8:	4628      	mov	r0, r5
 8001aca:	b002      	add	sp, #8
 8001acc:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ace:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f7      	bne.n	8001ac6 <osMessageQueueNew+0xa>
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <osMessageQueueNew+0x8c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d103      	bne.n	8001ae6 <osMessageQueueNew+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ade:	f3ef 8311 	mrs	r3, BASEPRI
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1ef      	bne.n	8001ac6 <osMessageQueueNew+0xa>
 8001ae6:	2800      	cmp	r0, #0
 8001ae8:	d0ed      	beq.n	8001ac6 <osMessageQueueNew+0xa>
 8001aea:	2900      	cmp	r1, #0
 8001aec:	d0eb      	beq.n	8001ac6 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8001aee:	b304      	cbz	r4, 8001b32 <osMessageQueueNew+0x76>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001af0:	68a3      	ldr	r3, [r4, #8]
 8001af2:	68e2      	ldr	r2, [r4, #12]
 8001af4:	b1ab      	cbz	r3, 8001b22 <osMessageQueueNew+0x66>
 8001af6:	2a4f      	cmp	r2, #79	; 0x4f
 8001af8:	d9e5      	bls.n	8001ac6 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001afa:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d0e2      	beq.n	8001ac6 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001b00:	6966      	ldr	r6, [r4, #20]
 8001b02:	fb01 f500 	mul.w	r5, r1, r0
 8001b06:	42ae      	cmp	r6, r5
 8001b08:	d3dd      	bcc.n	8001ac6 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001b0a:	2500      	movs	r5, #0
 8001b0c:	9500      	str	r5, [sp, #0]
 8001b0e:	f000 fc6b 	bl	80023e8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8001b12:	4605      	mov	r5, r0
 8001b14:	2800      	cmp	r0, #0
 8001b16:	d0d6      	beq.n	8001ac6 <osMessageQueueNew+0xa>
        name = attr->name;
 8001b18:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f000 fee4 	bl	80028e8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8001b20:	e7d2      	b.n	8001ac8 <osMessageQueueNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001b22:	2a00      	cmp	r2, #0
 8001b24:	d1cf      	bne.n	8001ac6 <osMessageQueueNew+0xa>
 8001b26:	6923      	ldr	r3, [r4, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1cc      	bne.n	8001ac6 <osMessageQueueNew+0xa>
      if (mem == 0) {
 8001b2c:	6963      	ldr	r3, [r4, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1c9      	bne.n	8001ac6 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f000 fca5 	bl	8002482 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8001b38:	4605      	mov	r5, r0
 8001b3a:	2800      	cmp	r0, #0
 8001b3c:	d0c3      	beq.n	8001ac6 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d1ea      	bne.n	8001b18 <osMessageQueueNew+0x5c>
        name = NULL;
 8001b42:	4621      	mov	r1, r4
 8001b44:	e7e9      	b.n	8001b1a <osMessageQueueNew+0x5e>
 8001b46:	bf00      	nop
 8001b48:	20000284 	.word	0x20000284

08001b4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8001b4c:	b513      	push	{r0, r1, r4, lr}
 8001b4e:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b50:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8001b54:	b123      	cbz	r3, 8001b60 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001b56:	b9e8      	cbnz	r0, 8001b94 <osMessageQueuePut+0x48>
      stat = osErrorParameter;
 8001b58:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b60:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f6      	bne.n	8001b56 <osMessageQueuePut+0xa>
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <osMessageQueuePut+0x80>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d103      	bne.n	8001b78 <osMessageQueuePut+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b70:	f3ef 8311 	mrs	r3, BASEPRI
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1ee      	bne.n	8001b56 <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	d0ed      	beq.n	8001b58 <osMessageQueuePut+0xc>
 8001b7c:	2900      	cmp	r1, #0
 8001b7e:	d0eb      	beq.n	8001b58 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001b80:	2300      	movs	r3, #0
 8001b82:	4622      	mov	r2, r4
 8001b84:	f000 fca4 	bl	80024d0 <xQueueGenericSend>
 8001b88:	2801      	cmp	r0, #1
 8001b8a:	d011      	beq.n	8001bb0 <osMessageQueuePut+0x64>
        if (timeout != 0U) {
 8001b8c:	b9dc      	cbnz	r4, 8001bc6 <osMessageQueuePut+0x7a>
          stat = osErrorResource;
 8001b8e:	f06f 0002 	mvn.w	r0, #2
 8001b92:	e7e3      	b.n	8001b5c <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001b94:	2900      	cmp	r1, #0
 8001b96:	d0df      	beq.n	8001b58 <osMessageQueuePut+0xc>
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	d1dd      	bne.n	8001b58 <osMessageQueuePut+0xc>
      yield = pdFALSE;
 8001b9c:	aa02      	add	r2, sp, #8
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001b9e:	4623      	mov	r3, r4
      yield = pdFALSE;
 8001ba0:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8001ba4:	f000 fd4a 	bl	800263c <xQueueGenericSendFromISR>
 8001ba8:	2801      	cmp	r0, #1
 8001baa:	d1f0      	bne.n	8001b8e <osMessageQueuePut+0x42>
        portYIELD_FROM_ISR (yield);
 8001bac:	9b01      	ldr	r3, [sp, #4]
 8001bae:	b90b      	cbnz	r3, 8001bb4 <osMessageQueuePut+0x68>
  stat = osOK;
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	e7d3      	b.n	8001b5c <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <osMessageQueuePut+0x84>)
 8001bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	f3bf 8f4f 	dsb	sy
 8001bc0:	f3bf 8f6f 	isb	sy
 8001bc4:	e7f4      	b.n	8001bb0 <osMessageQueuePut+0x64>
          stat = osErrorTimeout;
 8001bc6:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8001bca:	e7c7      	b.n	8001b5c <osMessageQueuePut+0x10>
 8001bcc:	20000284 	.word	0x20000284
 8001bd0:	e000ed04 	.word	0xe000ed04

08001bd4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8001bd4:	b513      	push	{r0, r1, r4, lr}
 8001bd6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bd8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8001bdc:	b123      	cbz	r3, 8001be8 <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001bde:	b9e0      	cbnz	r0, 8001c1a <osMessageQueueGet+0x46>
      stat = osErrorParameter;
 8001be0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8001be4:	b002      	add	sp, #8
 8001be6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001be8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f6      	bne.n	8001bde <osMessageQueueGet+0xa>
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <osMessageQueueGet+0x7c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d103      	bne.n	8001c00 <osMessageQueueGet+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ee      	bne.n	8001bde <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8001c00:	2800      	cmp	r0, #0
 8001c02:	d0ed      	beq.n	8001be0 <osMessageQueueGet+0xc>
 8001c04:	2900      	cmp	r1, #0
 8001c06:	d0eb      	beq.n	8001be0 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8001c08:	4622      	mov	r2, r4
 8001c0a:	f000 fd79 	bl	8002700 <xQueueReceive>
 8001c0e:	2801      	cmp	r0, #1
 8001c10:	d010      	beq.n	8001c34 <osMessageQueueGet+0x60>
        if (timeout != 0U) {
 8001c12:	b9d4      	cbnz	r4, 8001c4a <osMessageQueueGet+0x76>
          stat = osErrorResource;
 8001c14:	f06f 0002 	mvn.w	r0, #2
 8001c18:	e7e4      	b.n	8001be4 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8001c1a:	2900      	cmp	r1, #0
 8001c1c:	d0e0      	beq.n	8001be0 <osMessageQueueGet+0xc>
 8001c1e:	2c00      	cmp	r4, #0
 8001c20:	d1de      	bne.n	8001be0 <osMessageQueueGet+0xc>
      yield = pdFALSE;
 8001c22:	aa02      	add	r2, sp, #8
 8001c24:	f842 4d04 	str.w	r4, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8001c28:	f000 fe0e 	bl	8002848 <xQueueReceiveFromISR>
 8001c2c:	2801      	cmp	r0, #1
 8001c2e:	d1f1      	bne.n	8001c14 <osMessageQueueGet+0x40>
        portYIELD_FROM_ISR (yield);
 8001c30:	9b01      	ldr	r3, [sp, #4]
 8001c32:	b90b      	cbnz	r3, 8001c38 <osMessageQueueGet+0x64>
  stat = osOK;
 8001c34:	2000      	movs	r0, #0
 8001c36:	e7d5      	b.n	8001be4 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <osMessageQueueGet+0x80>)
 8001c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f3bf 8f4f 	dsb	sy
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	e7f4      	b.n	8001c34 <osMessageQueueGet+0x60>
          stat = osErrorTimeout;
 8001c4a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8001c4e:	e7c9      	b.n	8001be4 <osMessageQueueGet+0x10>
 8001c50:	20000284 	.word	0x20000284
 8001c54:	e000ed04 	.word	0xe000ed04

08001c58 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <vApplicationGetIdleTaskMemory+0x10>)
 8001c5a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <vApplicationGetIdleTaskMemory+0x14>)
 8001c5e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000228 	.word	0x20000228
 8001c6c:	20000028 	.word	0x20000028

08001c70 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <vApplicationGetTimerTaskMemory+0x10>)
 8001c72:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <vApplicationGetTimerTaskMemory+0x14>)
 8001c76:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4770      	bx	lr
 8001c80:	20000688 	.word	0x20000688
 8001c84:	20000288 	.word	0x20000288

08001c88 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c88:	f100 0308 	add.w	r3, r0, #8
 8001c8c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c8e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c92:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c94:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c96:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c98:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c9a:	6003      	str	r3, [r0, #0]
 8001c9c:	4770      	bx	lr

08001c9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	6103      	str	r3, [r0, #16]
 8001ca2:	4770      	bx	lr

08001ca4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ca4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ca6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cb0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001cb2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cb4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	6003      	str	r3, [r0, #0]
 8001cba:	4770      	bx	lr

08001cbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cbc:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cbe:	1c53      	adds	r3, r2, #1
{
 8001cc0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001cc2:	d10a      	bne.n	8001cda <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cc4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cca:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ccc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cce:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001cd0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cd2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	6003      	str	r3, [r0, #0]
 8001cd8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cda:	f100 0308 	add.w	r3, r0, #8
 8001cde:	685c      	ldr	r4, [r3, #4]
 8001ce0:	6825      	ldr	r5, [r4, #0]
 8001ce2:	42aa      	cmp	r2, r5
 8001ce4:	d3ef      	bcc.n	8001cc6 <vListInsert+0xa>
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	e7f9      	b.n	8001cde <vListInsert+0x22>

08001cea <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cea:	6841      	ldr	r1, [r0, #4]
 8001cec:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001cee:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cf0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cf2:	6882      	ldr	r2, [r0, #8]
 8001cf4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001cfa:	bf08      	it	eq
 8001cfc:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001cfe:	2200      	movs	r2, #0
 8001d00:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	3a01      	subs	r2, #1
 8001d06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d08:	6818      	ldr	r0, [r3, #0]
}
 8001d0a:	4770      	bx	lr

08001d0c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d0c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <prvTaskExitError+0x3c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	d008      	beq.n	8001d2c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	e7fe      	b.n	8001d2a <prvTaskExitError+0x1e>
 8001d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001d3c:	9b01      	ldr	r3, [sp, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0fc      	beq.n	8001d3c <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001d42:	b002      	add	sp, #8
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000004 	.word	0x20000004

08001d4c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001d4c:	4808      	ldr	r0, [pc, #32]	; (8001d70 <prvPortStartFirstTask+0x24>)
 8001d4e:	6800      	ldr	r0, [r0, #0]
 8001d50:	6800      	ldr	r0, [r0, #0]
 8001d52:	f380 8808 	msr	MSP, r0
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	f380 8814 	msr	CONTROL, r0
 8001d5e:	b662      	cpsie	i
 8001d60:	b661      	cpsie	f
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	df00      	svc	0
 8001d6c:	bf00      	nop
 8001d6e:	0000      	.short	0x0000
 8001d70:	e000ed08 	.word	0xe000ed08

08001d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001d84 <vPortEnableVFP+0x10>
 8001d78:	6801      	ldr	r1, [r0, #0]
 8001d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001d7e:	6001      	str	r1, [r0, #0]
 8001d80:	4770      	bx	lr
 8001d82:	0000      	.short	0x0000
 8001d84:	e000ed88 	.word	0xe000ed88

08001d88 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <pxPortInitialiseStack+0x28>)
 8001d92:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001d96:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001d9a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001d9e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001da2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001da6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001daa:	3844      	subs	r0, #68	; 0x44
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	08001d0d 	.word	0x08001d0d
	...

08001dc0 <SVC_Handler>:
	__asm volatile (
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <pxCurrentTCBConst2>)
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	6808      	ldr	r0, [r1, #0]
 8001dc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dca:	f380 8809 	msr	PSP, r0
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f380 8811 	msr	BASEPRI, r0
 8001dda:	4770      	bx	lr
 8001ddc:	f3af 8000 	nop.w

08001de0 <pxCurrentTCBConst2>:
 8001de0:	20004304 	.word	0x20004304

08001de4 <vPortEnterCritical>:
 8001de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de8:	f383 8811 	msr	BASEPRI, r3
 8001dec:	f3bf 8f6f 	isb	sy
 8001df0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <vPortEnterCritical+0x3c>)
 8001df6:	6813      	ldr	r3, [r2, #0]
 8001df8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001dfa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001dfc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001dfe:	d10d      	bne.n	8001e1c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <vPortEnterCritical+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001e08:	d008      	beq.n	8001e1c <vPortEnterCritical+0x38>
 8001e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	e7fe      	b.n	8001e1a <vPortEnterCritical+0x36>
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000004 	.word	0x20000004
 8001e24:	e000ed04 	.word	0xe000ed04

08001e28 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001e28:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <vPortExitCritical+0x24>)
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	b943      	cbnz	r3, 8001e40 <vPortExitCritical+0x18>
 8001e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	e7fe      	b.n	8001e3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001e40:	3b01      	subs	r3, #1
 8001e42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001e44:	b90b      	cbnz	r3, 8001e4a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e46:	f383 8811 	msr	BASEPRI, r3
 8001e4a:	4770      	bx	lr
 8001e4c:	20000004 	.word	0x20000004

08001e50 <PendSV_Handler>:
	__asm volatile
 8001e50:	f3ef 8009 	mrs	r0, PSP
 8001e54:	f3bf 8f6f 	isb	sy
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <pxCurrentTCBConst>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	f01e 0f10 	tst.w	lr, #16
 8001e60:	bf08      	it	eq
 8001e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e6a:	6010      	str	r0, [r2, #0]
 8001e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001e74:	f380 8811 	msr	BASEPRI, r0
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	f3bf 8f6f 	isb	sy
 8001e80:	f001 f8a2 	bl	8002fc8 <vTaskSwitchContext>
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f380 8811 	msr	BASEPRI, r0
 8001e8c:	bc09      	pop	{r0, r3}
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	6808      	ldr	r0, [r1, #0]
 8001e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e96:	f01e 0f10 	tst.w	lr, #16
 8001e9a:	bf08      	it	eq
 8001e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001ea0:	f380 8809 	msr	PSP, r0
 8001ea4:	f3bf 8f6f 	isb	sy
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	f3af 8000 	nop.w

08001eb0 <pxCurrentTCBConst>:
 8001eb0:	20004304 	.word	0x20004304

08001eb4 <SysTick_Handler>:
{
 8001eb4:	b508      	push	{r3, lr}
	__asm volatile
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001ec6:	f000 ff57 	bl	8002d78 <xTaskIncrementTick>
 8001eca:	b118      	cbz	r0, 8001ed4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <SysTick_Handler+0x28>)
 8001ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f383 8811 	msr	BASEPRI, r3
 8001eda:	bd08      	pop	{r3, pc}
 8001edc:	e000ed04 	.word	0xe000ed04

08001ee0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ee2:	4909      	ldr	r1, [pc, #36]	; (8001f08 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ee8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <vPortSetupTimerInterrupt+0x2c>)
 8001eec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef6:	4906      	ldr	r1, [pc, #24]	; (8001f10 <vPortSetupTimerInterrupt+0x30>)
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001efc:	2307      	movs	r3, #7
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000e010 	.word	0xe000e010
 8001f08:	e000e018 	.word	0xe000e018
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	e000e014 	.word	0xe000e014

08001f14 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f14:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <xPortStartScheduler+0xe8>)
 8001f16:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <xPortStartScheduler+0xec>)
{
 8001f18:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f1a:	6819      	ldr	r1, [r3, #0]
 8001f1c:	4291      	cmp	r1, r2
 8001f1e:	d108      	bne.n	8001f32 <xPortStartScheduler+0x1e>
	__asm volatile
 8001f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	e7fe      	b.n	8001f30 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <xPortStartScheduler+0xf0>)
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d108      	bne.n	8001f4c <xPortStartScheduler+0x38>
 8001f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	e7fe      	b.n	8001f4a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001f4c:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <xPortStartScheduler+0xf4>)
 8001f4e:	781a      	ldrb	r2, [r3, #0]
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001f54:	22ff      	movs	r2, #255	; 0xff
 8001f56:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f58:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f5a:	4a2c      	ldr	r2, [pc, #176]	; (800200c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001f62:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001f66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f6a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001f6c:	4b28      	ldr	r3, [pc, #160]	; (8002010 <xPortStartScheduler+0xfc>)
 8001f6e:	2207      	movs	r2, #7
 8001f70:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001f72:	2100      	movs	r1, #0
 8001f74:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001f78:	0600      	lsls	r0, r0, #24
 8001f7a:	f102 34ff 	add.w	r4, r2, #4294967295
 8001f7e:	d40d      	bmi.n	8001f9c <xPortStartScheduler+0x88>
 8001f80:	b101      	cbz	r1, 8001f84 <xPortStartScheduler+0x70>
 8001f82:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2a03      	cmp	r2, #3
 8001f88:	d011      	beq.n	8001fae <xPortStartScheduler+0x9a>
 8001f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	e7fe      	b.n	8001f9a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001f9c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001fa0:	0052      	lsls	r2, r2, #1
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f88d 2003 	strb.w	r2, [sp, #3]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	4622      	mov	r2, r4
 8001fac:	e7e2      	b.n	8001f74 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001fae:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001fb0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001fb4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001fb6:	9b01      	ldr	r3, [sp, #4]
 8001fb8:	4a13      	ldr	r2, [pc, #76]	; (8002008 <xPortStartScheduler+0xf4>)
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <xPortStartScheduler+0x100>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001fc6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001fce:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001fd0:	f7ff ff86 	bl	8001ee0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <xPortStartScheduler+0x104>)
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001fda:	f7ff fecb 	bl	8001d74 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <xPortStartScheduler+0x108>)
 8001fe0:	6813      	ldr	r3, [r2, #0]
 8001fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001fe6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001fe8:	f7ff feb0 	bl	8001d4c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001fec:	f000 ffec 	bl	8002fc8 <vTaskSwitchContext>
	prvTaskExitError();
 8001ff0:	f7ff fe8c 	bl	8001d0c <prvTaskExitError>
}
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	b002      	add	sp, #8
 8001ff8:	bd10      	pop	{r4, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00
 8002000:	410fc271 	.word	0x410fc271
 8002004:	410fc270 	.word	0x410fc270
 8002008:	e000e400 	.word	0xe000e400
 800200c:	200006e4 	.word	0x200006e4
 8002010:	200006e8 	.word	0x200006e8
 8002014:	e000ed20 	.word	0xe000ed20
 8002018:	20000004 	.word	0x20000004
 800201c:	e000ef34 	.word	0xe000ef34

08002020 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002020:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002024:	2b0f      	cmp	r3, #15
 8002026:	d90e      	bls.n	8002046 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002028:	4a10      	ldr	r2, [pc, #64]	; (800206c <vPortValidateInterruptPriority+0x4c>)
 800202a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800202c:	4a10      	ldr	r2, [pc, #64]	; (8002070 <vPortValidateInterruptPriority+0x50>)
 800202e:	7812      	ldrb	r2, [r2, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d908      	bls.n	8002046 <vPortValidateInterruptPriority+0x26>
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	e7fe      	b.n	8002044 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <vPortValidateInterruptPriority+0x54>)
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <vPortValidateInterruptPriority+0x58>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002052:	4293      	cmp	r3, r2
 8002054:	d908      	bls.n	8002068 <vPortValidateInterruptPriority+0x48>
 8002056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205a:	f383 8811 	msr	BASEPRI, r3
 800205e:	f3bf 8f6f 	isb	sy
 8002062:	f3bf 8f4f 	dsb	sy
 8002066:	e7fe      	b.n	8002066 <vPortValidateInterruptPriority+0x46>
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e3f0 	.word	0xe000e3f0
 8002070:	200006e4 	.word	0x200006e4
 8002074:	e000ed0c 	.word	0xe000ed0c
 8002078:	200006e8 	.word	0x200006e8

0800207c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800207c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <prvInsertBlockIntoFreeList+0x40>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4282      	cmp	r2, r0
 8002084:	d318      	bcc.n	80020b8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002086:	685c      	ldr	r4, [r3, #4]
 8002088:	1919      	adds	r1, r3, r4
 800208a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800208c:	bf01      	itttt	eq
 800208e:	6841      	ldreq	r1, [r0, #4]
 8002090:	4618      	moveq	r0, r3
 8002092:	1909      	addeq	r1, r1, r4
 8002094:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002096:	6844      	ldr	r4, [r0, #4]
 8002098:	1901      	adds	r1, r0, r4
 800209a:	428a      	cmp	r2, r1
 800209c:	d107      	bne.n	80020ae <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <prvInsertBlockIntoFreeList+0x44>)
 80020a0:	6809      	ldr	r1, [r1, #0]
 80020a2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020a4:	bf1f      	itttt	ne
 80020a6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80020a8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80020aa:	1909      	addne	r1, r1, r4
 80020ac:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80020ae:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80020b0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020b2:	bf18      	it	ne
 80020b4:	6018      	strne	r0, [r3, #0]
 80020b6:	bd10      	pop	{r4, pc}
 80020b8:	4613      	mov	r3, r2
 80020ba:	e7e1      	b.n	8002080 <prvInsertBlockIntoFreeList+0x4>
 80020bc:	200042fc 	.word	0x200042fc
 80020c0:	200006ec 	.word	0x200006ec

080020c4 <pvPortMalloc>:
{
 80020c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80020ca:	f000 fe47 	bl	8002d5c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80020ce:	493e      	ldr	r1, [pc, #248]	; (80021c8 <pvPortMalloc+0x104>)
 80020d0:	4d3e      	ldr	r5, [pc, #248]	; (80021cc <pvPortMalloc+0x108>)
 80020d2:	680b      	ldr	r3, [r1, #0]
 80020d4:	bb0b      	cbnz	r3, 800211a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80020d6:	4a3e      	ldr	r2, [pc, #248]	; (80021d0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80020d8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80020da:	bf1f      	itttt	ne
 80020dc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020de:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80020e2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80020e6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020e8:	bf14      	ite	ne
 80020ea:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80020ec:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80020f0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80020f2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80020f4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80020f8:	4e36      	ldr	r6, [pc, #216]	; (80021d4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80020fa:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80020fc:	2000      	movs	r0, #0
 80020fe:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002100:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002102:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002104:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002106:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002108:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800210a:	4b33      	ldr	r3, [pc, #204]	; (80021d8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800210c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800210e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <pvPortMalloc+0x118>)
 8002112:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002114:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002118:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800211a:	682f      	ldr	r7, [r5, #0]
 800211c:	4227      	tst	r7, r4
 800211e:	d116      	bne.n	800214e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002120:	2c00      	cmp	r4, #0
 8002122:	d041      	beq.n	80021a8 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002124:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002128:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800212a:	bf1c      	itt	ne
 800212c:	f023 0307 	bicne.w	r3, r3, #7
 8002130:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002132:	b163      	cbz	r3, 800214e <pvPortMalloc+0x8a>
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <pvPortMalloc+0x118>)
 8002136:	6816      	ldr	r6, [r2, #0]
 8002138:	42b3      	cmp	r3, r6
 800213a:	4690      	mov	r8, r2
 800213c:	d807      	bhi.n	800214e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800213e:	4a25      	ldr	r2, [pc, #148]	; (80021d4 <pvPortMalloc+0x110>)
 8002140:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002142:	6868      	ldr	r0, [r5, #4]
 8002144:	4283      	cmp	r3, r0
 8002146:	d804      	bhi.n	8002152 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002148:	6809      	ldr	r1, [r1, #0]
 800214a:	428d      	cmp	r5, r1
 800214c:	d107      	bne.n	800215e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800214e:	2400      	movs	r4, #0
 8002150:	e02a      	b.n	80021a8 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002152:	682c      	ldr	r4, [r5, #0]
 8002154:	2c00      	cmp	r4, #0
 8002156:	d0f7      	beq.n	8002148 <pvPortMalloc+0x84>
 8002158:	462a      	mov	r2, r5
 800215a:	4625      	mov	r5, r4
 800215c:	e7f1      	b.n	8002142 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800215e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002160:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002162:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002164:	1ac2      	subs	r2, r0, r3
 8002166:	2a10      	cmp	r2, #16
 8002168:	d90f      	bls.n	800218a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800216a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800216c:	0741      	lsls	r1, r0, #29
 800216e:	d008      	beq.n	8002182 <pvPortMalloc+0xbe>
 8002170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	e7fe      	b.n	8002180 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002182:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002184:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002186:	f7ff ff79 	bl	800207c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800218a:	4913      	ldr	r1, [pc, #76]	; (80021d8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800218c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800218e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002190:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002192:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002194:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002196:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800219a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800219e:	bf38      	it	cc
 80021a0:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80021a2:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021a4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021a6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80021a8:	f000 fe76 	bl	8002e98 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021ac:	0763      	lsls	r3, r4, #29
 80021ae:	d008      	beq.n	80021c2 <pvPortMalloc+0xfe>
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	e7fe      	b.n	80021c0 <pvPortMalloc+0xfc>
}
 80021c2:	4620      	mov	r0, r4
 80021c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c8:	200006ec 	.word	0x200006ec
 80021cc:	200042f0 	.word	0x200042f0
 80021d0:	200006f0 	.word	0x200006f0
 80021d4:	200042fc 	.word	0x200042fc
 80021d8:	200042f8 	.word	0x200042f8
 80021dc:	200042f4 	.word	0x200042f4

080021e0 <vPortFree>:
{
 80021e0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80021e2:	4604      	mov	r4, r0
 80021e4:	b370      	cbz	r0, 8002244 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80021e6:	4a18      	ldr	r2, [pc, #96]	; (8002248 <vPortFree+0x68>)
 80021e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	4213      	tst	r3, r2
 80021f0:	d108      	bne.n	8002204 <vPortFree+0x24>
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	e7fe      	b.n	8002202 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002204:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002208:	b141      	cbz	r1, 800221c <vPortFree+0x3c>
 800220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	e7fe      	b.n	800221a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800221c:	ea23 0302 	bic.w	r3, r3, r2
 8002220:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002224:	f000 fd9a 	bl	8002d5c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <vPortFree+0x6c>)
 800222a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800222e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002230:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002234:	440b      	add	r3, r1
 8002236:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002238:	f7ff ff20 	bl	800207c <prvInsertBlockIntoFreeList>
}
 800223c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002240:	f000 be2a 	b.w	8002e98 <xTaskResumeAll>
 8002244:	bd10      	pop	{r4, pc}
 8002246:	bf00      	nop
 8002248:	200042f0 	.word	0x200042f0
 800224c:	200042f4 	.word	0x200042f4

08002250 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002250:	b510      	push	{r4, lr}
 8002252:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002254:	f7ff fdc6 	bl	8001de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002258:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800225a:	f7ff fde5 	bl	8001e28 <vPortExitCritical>

	return xReturn;
}
 800225e:	fab4 f084 	clz	r0, r4
 8002262:	0940      	lsrs	r0, r0, #5
 8002264:	bd10      	pop	{r4, pc}

08002266 <prvCopyDataToQueue>:
{
 8002266:	b570      	push	{r4, r5, r6, lr}
 8002268:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800226a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800226c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800226e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002270:	b942      	cbnz	r2, 8002284 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002272:	6805      	ldr	r5, [r0, #0]
 8002274:	b99d      	cbnz	r5, 800229e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002276:	6840      	ldr	r0, [r0, #4]
 8002278:	f000 ffc4 	bl	8003204 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800227c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800227e:	3601      	adds	r6, #1
 8002280:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002282:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002284:	b96d      	cbnz	r5, 80022a2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002286:	6880      	ldr	r0, [r0, #8]
 8002288:	f001 fd26 	bl	8003cd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800228c:	68a3      	ldr	r3, [r4, #8]
 800228e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002290:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002292:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002294:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002296:	4293      	cmp	r3, r2
 8002298:	d301      	bcc.n	800229e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800229e:	2000      	movs	r0, #0
 80022a0:	e7ed      	b.n	800227e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022a2:	68c0      	ldr	r0, [r0, #12]
 80022a4:	f001 fd18 	bl	8003cd8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022aa:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022ac:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022ae:	425b      	negs	r3, r3
 80022b0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022b2:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80022b4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80022b6:	bf3e      	ittt	cc
 80022b8:	6862      	ldrcc	r2, [r4, #4]
 80022ba:	189b      	addcc	r3, r3, r2
 80022bc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80022be:	2d02      	cmp	r5, #2
 80022c0:	d1ed      	bne.n	800229e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022c2:	b10e      	cbz	r6, 80022c8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80022c4:	3e01      	subs	r6, #1
 80022c6:	e7ea      	b.n	800229e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80022c8:	4630      	mov	r0, r6
 80022ca:	e7d8      	b.n	800227e <prvCopyDataToQueue+0x18>

080022cc <prvCopyDataFromQueue>:
{
 80022cc:	4603      	mov	r3, r0
 80022ce:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80022d2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022d4:	b162      	cbz	r2, 80022f0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022d6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022d8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022da:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80022dc:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80022de:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80022e0:	bf24      	itt	cs
 80022e2:	6819      	ldrcs	r1, [r3, #0]
 80022e4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80022e6:	68d9      	ldr	r1, [r3, #12]
}
 80022e8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80022ec:	f001 bcf4 	b.w	8003cd8 <memcpy>
}
 80022f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <prvUnlockQueue>:
{
 80022f6:	b570      	push	{r4, r5, r6, lr}
 80022f8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80022fa:	f7ff fd73 	bl	8001de4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80022fe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002302:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002306:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002308:	2d00      	cmp	r5, #0
 800230a:	dc14      	bgt.n	8002336 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800230c:	23ff      	movs	r3, #255	; 0xff
 800230e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002312:	f7ff fd89 	bl	8001e28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002316:	f7ff fd65 	bl	8001de4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800231a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800231e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002322:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002324:	2d00      	cmp	r5, #0
 8002326:	dc12      	bgt.n	800234e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002328:	23ff      	movs	r3, #255	; 0xff
 800232a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800232e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002332:	f7ff bd79 	b.w	8001e28 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0e7      	beq.n	800230c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800233c:	4630      	mov	r0, r6
 800233e:	f000 fec3 	bl	80030c8 <xTaskRemoveFromEventList>
 8002342:	b108      	cbz	r0, 8002348 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002344:	f000 ff48 	bl	80031d8 <vTaskMissedYield>
 8002348:	3d01      	subs	r5, #1
 800234a:	b26d      	sxtb	r5, r5
 800234c:	e7dc      	b.n	8002308 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800234e:	6923      	ldr	r3, [r4, #16]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0e9      	beq.n	8002328 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002354:	4630      	mov	r0, r6
 8002356:	f000 feb7 	bl	80030c8 <xTaskRemoveFromEventList>
 800235a:	b108      	cbz	r0, 8002360 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800235c:	f000 ff3c 	bl	80031d8 <vTaskMissedYield>
 8002360:	3d01      	subs	r5, #1
 8002362:	b26d      	sxtb	r5, r5
 8002364:	e7de      	b.n	8002324 <prvUnlockQueue+0x2e>
	...

08002368 <xQueueGenericReset>:
{
 8002368:	b538      	push	{r3, r4, r5, lr}
 800236a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800236c:	4604      	mov	r4, r0
 800236e:	b940      	cbnz	r0, 8002382 <xQueueGenericReset+0x1a>
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	e7fe      	b.n	8002380 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002382:	f7ff fd2f 	bl	8001de4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002386:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002388:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800238a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800238c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800238e:	4343      	muls	r3, r0
 8002390:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002392:	1a1b      	subs	r3, r3, r0
 8002394:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002396:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002398:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800239a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800239c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800239e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80023a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80023a8:	b995      	cbnz	r5, 80023d0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023aa:	6923      	ldr	r3, [r4, #16]
 80023ac:	b163      	cbz	r3, 80023c8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ae:	f104 0010 	add.w	r0, r4, #16
 80023b2:	f000 fe89 	bl	80030c8 <xTaskRemoveFromEventList>
 80023b6:	b138      	cbz	r0, 80023c8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <xQueueGenericReset+0x7c>)
 80023ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80023c8:	f7ff fd2e 	bl	8001e28 <vPortExitCritical>
}
 80023cc:	2001      	movs	r0, #1
 80023ce:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80023d0:	f104 0010 	add.w	r0, r4, #16
 80023d4:	f7ff fc58 	bl	8001c88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023dc:	f7ff fc54 	bl	8001c88 <vListInitialise>
 80023e0:	e7f2      	b.n	80023c8 <xQueueGenericReset+0x60>
 80023e2:	bf00      	nop
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <xQueueGenericCreateStatic>:
	{
 80023e8:	b513      	push	{r0, r1, r4, lr}
 80023ea:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023ec:	b940      	cbnz	r0, 8002400 <xQueueGenericCreateStatic+0x18>
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	e7fe      	b.n	80023fe <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8002400:	b943      	cbnz	r3, 8002414 <xQueueGenericCreateStatic+0x2c>
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	e7fe      	b.n	8002412 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002414:	b14a      	cbz	r2, 800242a <xQueueGenericCreateStatic+0x42>
 8002416:	b9d9      	cbnz	r1, 8002450 <xQueueGenericCreateStatic+0x68>
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	e7fe      	b.n	8002428 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800242a:	b189      	cbz	r1, 8002450 <xQueueGenericCreateStatic+0x68>
 800242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	e7fe      	b.n	800243c <xQueueGenericCreateStatic+0x54>
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	e7fe      	b.n	800244e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002450:	2350      	movs	r3, #80	; 0x50
 8002452:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002454:	9b01      	ldr	r3, [sp, #4]
 8002456:	2b50      	cmp	r3, #80	; 0x50
 8002458:	d1f1      	bne.n	800243e <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800245a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800245c:	2900      	cmp	r1, #0
 800245e:	bf08      	it	eq
 8002460:	4622      	moveq	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002462:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8002466:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002468:	6421      	str	r1, [r4, #64]	; 0x40
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800246a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800246c:	4619      	mov	r1, r3
 800246e:	4620      	mov	r0, r4
 8002470:	f7ff ff7a 	bl	8002368 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002474:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002478:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800247c:	4620      	mov	r0, r4
 800247e:	b002      	add	sp, #8
 8002480:	bd10      	pop	{r4, pc}

08002482 <xQueueGenericCreate>:
	{
 8002482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002484:	460d      	mov	r5, r1
 8002486:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002488:	4606      	mov	r6, r0
 800248a:	b940      	cbnz	r0, 800249e <xQueueGenericCreate+0x1c>
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	e7fe      	b.n	800249c <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800249e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80024a0:	3050      	adds	r0, #80	; 0x50
 80024a2:	f7ff fe0f 	bl	80020c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80024a6:	4604      	mov	r4, r0
 80024a8:	b160      	cbz	r0, 80024c4 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80024b0:	b955      	cbnz	r5, 80024c8 <xQueueGenericCreate+0x46>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024b2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80024b4:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024b6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024b8:	2101      	movs	r1, #1
 80024ba:	4620      	mov	r0, r4
 80024bc:	f7ff ff54 	bl	8002368 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80024c0:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80024c4:	4620      	mov	r0, r4
 80024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80024c8:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024cc:	6003      	str	r3, [r0, #0]
 80024ce:	e7f1      	b.n	80024b4 <xQueueGenericCreate+0x32>

080024d0 <xQueueGenericSend>:
{
 80024d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024d4:	4689      	mov	r9, r1
 80024d6:	9201      	str	r2, [sp, #4]
 80024d8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80024da:	4604      	mov	r4, r0
 80024dc:	b940      	cbnz	r0, 80024f0 <xQueueGenericSend+0x20>
 80024de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e2:	f383 8811 	msr	BASEPRI, r3
 80024e6:	f3bf 8f6f 	isb	sy
 80024ea:	f3bf 8f4f 	dsb	sy
 80024ee:	e7fe      	b.n	80024ee <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024f0:	2900      	cmp	r1, #0
 80024f2:	f040 8088 	bne.w	8002606 <xQueueGenericSend+0x136>
 80024f6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8084 	beq.w	8002606 <xQueueGenericSend+0x136>
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	e7fe      	b.n	800250e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002510:	9e01      	ldr	r6, [sp, #4]
 8002512:	2e00      	cmp	r6, #0
 8002514:	f000 8082 	beq.w	800261c <xQueueGenericSend+0x14c>
 8002518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251c:	f383 8811 	msr	BASEPRI, r3
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f3bf 8f4f 	dsb	sy
 8002528:	e7fe      	b.n	8002528 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800252a:	9d01      	ldr	r5, [sp, #4]
 800252c:	b91d      	cbnz	r5, 8002536 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800252e:	f7ff fc7b 	bl	8001e28 <vPortExitCritical>
			return errQUEUE_FULL;
 8002532:	2000      	movs	r0, #0
 8002534:	e058      	b.n	80025e8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002536:	b916      	cbnz	r6, 800253e <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002538:	a802      	add	r0, sp, #8
 800253a:	f000 fe05 	bl	8003148 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800253e:	f7ff fc73 	bl	8001e28 <vPortExitCritical>
		vTaskSuspendAll();
 8002542:	f000 fc0b 	bl	8002d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002546:	f7ff fc4d 	bl	8001de4 <vPortEnterCritical>
 800254a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800254e:	2bff      	cmp	r3, #255	; 0xff
 8002550:	bf08      	it	eq
 8002552:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002556:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800255a:	2bff      	cmp	r3, #255	; 0xff
 800255c:	bf08      	it	eq
 800255e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002562:	f7ff fc61 	bl	8001e28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002566:	a901      	add	r1, sp, #4
 8002568:	a802      	add	r0, sp, #8
 800256a:	f000 fdf9 	bl	8003160 <xTaskCheckForTimeOut>
 800256e:	2800      	cmp	r0, #0
 8002570:	d143      	bne.n	80025fa <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002572:	f7ff fc37 	bl	8001de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002576:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002578:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800257a:	f7ff fc55 	bl	8001e28 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800257e:	42ae      	cmp	r6, r5
 8002580:	d135      	bne.n	80025ee <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002582:	9901      	ldr	r1, [sp, #4]
 8002584:	f104 0010 	add.w	r0, r4, #16
 8002588:	f000 fd66 	bl	8003058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff feb2 	bl	80022f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002592:	f000 fc81 	bl	8002e98 <xTaskResumeAll>
 8002596:	b938      	cbnz	r0, 80025a8 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8002598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800259c:	f8ca 3000 	str.w	r3, [sl]
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80025aa:	f7ff fc1b 	bl	8001de4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80025b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d301      	bcc.n	80025ba <xQueueGenericSend+0xea>
 80025b6:	2f02      	cmp	r7, #2
 80025b8:	d1b7      	bne.n	800252a <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025ba:	463a      	mov	r2, r7
 80025bc:	4649      	mov	r1, r9
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff fe51 	bl	8002266 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025c6:	b11b      	cbz	r3, 80025d0 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025cc:	f000 fd7c 	bl	80030c8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80025d0:	b138      	cbz	r0, 80025e2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <xQueueGenericSend+0x168>)
 80025d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80025e2:	f7ff fc21 	bl	8001e28 <vPortExitCritical>
				return pdPASS;
 80025e6:	2001      	movs	r0, #1
}
 80025e8:	b004      	add	sp, #16
 80025ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80025ee:	4620      	mov	r0, r4
 80025f0:	f7ff fe81 	bl	80022f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025f4:	f000 fc50 	bl	8002e98 <xTaskResumeAll>
 80025f8:	e7d6      	b.n	80025a8 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80025fa:	4620      	mov	r0, r4
 80025fc:	f7ff fe7b 	bl	80022f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002600:	f000 fc4a 	bl	8002e98 <xTaskResumeAll>
 8002604:	e795      	b.n	8002532 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002606:	2f02      	cmp	r7, #2
 8002608:	d102      	bne.n	8002610 <xQueueGenericSend+0x140>
 800260a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10a      	bne.n	8002626 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002610:	f000 fde8 	bl	80031e4 <xTaskGetSchedulerState>
 8002614:	2800      	cmp	r0, #0
 8002616:	f43f af7b 	beq.w	8002510 <xQueueGenericSend+0x40>
 800261a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800261c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002620:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002638 <xQueueGenericSend+0x168>
 8002624:	e7c1      	b.n	80025aa <xQueueGenericSend+0xda>
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	e7fe      	b.n	8002636 <xQueueGenericSend+0x166>
 8002638:	e000ed04 	.word	0xe000ed04

0800263c <xQueueGenericSendFromISR>:
{
 800263c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002640:	4688      	mov	r8, r1
 8002642:	4691      	mov	r9, r2
 8002644:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002646:	4604      	mov	r4, r0
 8002648:	b940      	cbnz	r0, 800265c <xQueueGenericSendFromISR+0x20>
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	e7fe      	b.n	800265a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800265c:	bb09      	cbnz	r1, 80026a2 <xQueueGenericSendFromISR+0x66>
 800265e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002660:	b1fb      	cbz	r3, 80026a2 <xQueueGenericSendFromISR+0x66>
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	e7fe      	b.n	8002672 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002674:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002678:	f000 fd26 	bl	80030c8 <xTaskRemoveFromEventList>
 800267c:	2800      	cmp	r0, #0
 800267e:	d034      	beq.n	80026ea <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002680:	f1b9 0f00 	cmp.w	r9, #0
 8002684:	d031      	beq.n	80026ea <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002686:	2001      	movs	r0, #1
 8002688:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 800268c:	f386 8811 	msr	BASEPRI, r6
}
 8002690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002694:	3501      	adds	r5, #1
 8002696:	b26d      	sxtb	r5, r5
 8002698:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800269c:	e025      	b.n	80026ea <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800269e:	2000      	movs	r0, #0
 80026a0:	e7f4      	b.n	800268c <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026a2:	2f02      	cmp	r7, #2
 80026a4:	d102      	bne.n	80026ac <xQueueGenericSendFromISR+0x70>
 80026a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d120      	bne.n	80026ee <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026ac:	f7ff fcb8 	bl	8002020 <vPortValidateInterruptPriority>
	__asm volatile
 80026b0:	f3ef 8611 	mrs	r6, BASEPRI
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d301      	bcc.n	80026d0 <xQueueGenericSendFromISR+0x94>
 80026cc:	2f02      	cmp	r7, #2
 80026ce:	d1e6      	bne.n	800269e <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 80026d0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d4:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80026d6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026d8:	4641      	mov	r1, r8
 80026da:	4620      	mov	r0, r4
 80026dc:	f7ff fdc3 	bl	8002266 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80026e0:	1c6b      	adds	r3, r5, #1
 80026e2:	d1d7      	bne.n	8002694 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1c4      	bne.n	8002674 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80026ea:	2001      	movs	r0, #1
 80026ec:	e7ce      	b.n	800268c <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	e7fe      	b.n	80026fe <xQueueGenericSendFromISR+0xc2>

08002700 <xQueueReceive>:
{
 8002700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002704:	b085      	sub	sp, #20
 8002706:	4688      	mov	r8, r1
 8002708:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800270a:	4604      	mov	r4, r0
 800270c:	b940      	cbnz	r0, 8002720 <xQueueReceive+0x20>
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	e7fe      	b.n	800271e <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002720:	2900      	cmp	r1, #0
 8002722:	f040 8086 	bne.w	8002832 <xQueueReceive+0x132>
 8002726:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8082 	beq.w	8002832 <xQueueReceive+0x132>
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	e7fe      	b.n	800273e <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002740:	9e01      	ldr	r6, [sp, #4]
 8002742:	2e00      	cmp	r6, #0
 8002744:	d07a      	beq.n	800283c <xQueueReceive+0x13c>
 8002746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274a:	f383 8811 	msr	BASEPRI, r3
 800274e:	f3bf 8f6f 	isb	sy
 8002752:	f3bf 8f4f 	dsb	sy
 8002756:	e7fe      	b.n	8002756 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002758:	9d01      	ldr	r5, [sp, #4]
 800275a:	b91d      	cbnz	r5, 8002764 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 800275c:	f7ff fb64 	bl	8001e28 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002760:	2000      	movs	r0, #0
 8002762:	e052      	b.n	800280a <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8002764:	b916      	cbnz	r6, 800276c <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002766:	a802      	add	r0, sp, #8
 8002768:	f000 fcee 	bl	8003148 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800276c:	f7ff fb5c 	bl	8001e28 <vPortExitCritical>
		vTaskSuspendAll();
 8002770:	f000 faf4 	bl	8002d5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002774:	f7ff fb36 	bl	8001de4 <vPortEnterCritical>
 8002778:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800277c:	2bff      	cmp	r3, #255	; 0xff
 800277e:	bf08      	it	eq
 8002780:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002784:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002788:	2bff      	cmp	r3, #255	; 0xff
 800278a:	bf08      	it	eq
 800278c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002790:	f7ff fb4a 	bl	8001e28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002794:	a901      	add	r1, sp, #4
 8002796:	a802      	add	r0, sp, #8
 8002798:	f000 fce2 	bl	8003160 <xTaskCheckForTimeOut>
 800279c:	2800      	cmp	r0, #0
 800279e:	d13d      	bne.n	800281c <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fd55 	bl	8002250 <prvIsQueueEmpty>
 80027a6:	b398      	cbz	r0, 8002810 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027a8:	9901      	ldr	r1, [sp, #4]
 80027aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027ae:	f000 fc53 	bl	8003058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff fd9f 	bl	80022f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027b8:	f000 fb6e 	bl	8002e98 <xTaskResumeAll>
 80027bc:	b938      	cbnz	r0, 80027ce <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 80027be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80027c2:	f8c9 3000 	str.w	r3, [r9]
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80027d0:	f7ff fb08 	bl	8001de4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027d4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027d6:	2d00      	cmp	r5, #0
 80027d8:	d0be      	beq.n	8002758 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027da:	4641      	mov	r1, r8
 80027dc:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027de:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027e0:	f7ff fd74 	bl	80022cc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027e4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027e6:	6923      	ldr	r3, [r4, #16]
 80027e8:	b163      	cbz	r3, 8002804 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ea:	f104 0010 	add.w	r0, r4, #16
 80027ee:	f000 fc6b 	bl	80030c8 <xTaskRemoveFromEventList>
 80027f2:	b138      	cbz	r0, 8002804 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <xQueueReceive+0x144>)
 80027f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002804:	f7ff fb10 	bl	8001e28 <vPortExitCritical>
				return pdPASS;
 8002808:	2001      	movs	r0, #1
}
 800280a:	b005      	add	sp, #20
 800280c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff fd70 	bl	80022f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002816:	f000 fb3f 	bl	8002e98 <xTaskResumeAll>
 800281a:	e7d8      	b.n	80027ce <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff fd6a 	bl	80022f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002822:	f000 fb39 	bl	8002e98 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fd12 	bl	8002250 <prvIsQueueEmpty>
 800282c:	2800      	cmp	r0, #0
 800282e:	d0ce      	beq.n	80027ce <xQueueReceive+0xce>
 8002830:	e796      	b.n	8002760 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002832:	f000 fcd7 	bl	80031e4 <xTaskGetSchedulerState>
 8002836:	2800      	cmp	r0, #0
 8002838:	d082      	beq.n	8002740 <xQueueReceive+0x40>
 800283a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800283c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800283e:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002844 <xQueueReceive+0x144>
 8002842:	e7c5      	b.n	80027d0 <xQueueReceive+0xd0>
 8002844:	e000ed04 	.word	0xe000ed04

08002848 <xQueueReceiveFromISR>:
{
 8002848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800284c:	4689      	mov	r9, r1
 800284e:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002850:	4605      	mov	r5, r0
 8002852:	b940      	cbnz	r0, 8002866 <xQueueReceiveFromISR+0x1e>
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	e7fe      	b.n	8002864 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002866:	bb71      	cbnz	r1, 80028c6 <xQueueReceiveFromISR+0x7e>
 8002868:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800286a:	b363      	cbz	r3, 80028c6 <xQueueReceiveFromISR+0x7e>
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	e7fe      	b.n	800287c <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 800287e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002882:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002884:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002886:	4628      	mov	r0, r5
 8002888:	f7ff fd20 	bl	80022cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800288c:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800288e:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002890:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002892:	d113      	bne.n	80028bc <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002894:	692b      	ldr	r3, [r5, #16]
 8002896:	b90b      	cbnz	r3, 800289c <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8002898:	2001      	movs	r0, #1
 800289a:	e00b      	b.n	80028b4 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800289c:	f105 0010 	add.w	r0, r5, #16
 80028a0:	f000 fc12 	bl	80030c8 <xTaskRemoveFromEventList>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d0f7      	beq.n	8002898 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 80028a8:	f1b8 0f00 	cmp.w	r8, #0
 80028ac:	d0f4      	beq.n	8002898 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80028ae:	2001      	movs	r0, #1
 80028b0:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80028b4:	f387 8811 	msr	BASEPRI, r7
}
 80028b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80028bc:	3601      	adds	r6, #1
 80028be:	b276      	sxtb	r6, r6
 80028c0:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80028c4:	e7e8      	b.n	8002898 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028c6:	f7ff fbab 	bl	8002020 <vPortValidateInterruptPriority>
	__asm volatile
 80028ca:	f3ef 8711 	mrs	r7, BASEPRI
 80028ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028de:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028e0:	2c00      	cmp	r4, #0
 80028e2:	d1cc      	bne.n	800287e <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 80028e4:	4620      	mov	r0, r4
 80028e6:	e7e5      	b.n	80028b4 <xQueueReceiveFromISR+0x6c>

080028e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80028e8:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028ea:	4a07      	ldr	r2, [pc, #28]	; (8002908 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ec:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028ee:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80028f2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80028f6:	b91d      	cbnz	r5, 8002900 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028fc:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028fe:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002900:	3301      	adds	r3, #1
 8002902:	2b08      	cmp	r3, #8
 8002904:	d1f3      	bne.n	80028ee <vQueueAddToRegistry+0x6>
 8002906:	bd30      	pop	{r4, r5, pc}
 8002908:	20004930 	.word	0x20004930

0800290c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	4604      	mov	r4, r0
 8002910:	460d      	mov	r5, r1
 8002912:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002914:	f7ff fa66 	bl	8001de4 <vPortEnterCritical>
 8002918:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800291c:	2bff      	cmp	r3, #255	; 0xff
 800291e:	bf04      	itt	eq
 8002920:	2300      	moveq	r3, #0
 8002922:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002926:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800292a:	2bff      	cmp	r3, #255	; 0xff
 800292c:	bf04      	itt	eq
 800292e:	2300      	moveq	r3, #0
 8002930:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002934:	f7ff fa78 	bl	8001e28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002938:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800293a:	b92b      	cbnz	r3, 8002948 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800293c:	4632      	mov	r2, r6
 800293e:	4629      	mov	r1, r5
 8002940:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002944:	f000 fba2 	bl	800308c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002948:	4620      	mov	r0, r4
	}
 800294a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800294e:	f7ff bcd2 	b.w	80022f6 <prvUnlockQueue>
	...

08002954 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002958:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800295a:	f7ff fa43 	bl	8001de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800295e:	4b2e      	ldr	r3, [pc, #184]	; (8002a18 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8002960:	4d2e      	ldr	r5, [pc, #184]	; (8002a1c <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4f2e      	ldr	r7, [pc, #184]	; (8002a20 <prvAddNewTaskToReadyList+0xcc>)
 8002966:	3201      	adds	r2, #1
 8002968:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800296a:	682e      	ldr	r6, [r5, #0]
 800296c:	2e00      	cmp	r6, #0
 800296e:	d147      	bne.n	8002a00 <prvAddNewTaskToReadyList+0xac>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002970:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d11d      	bne.n	80029b4 <prvAddNewTaskToReadyList+0x60>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002978:	19b8      	adds	r0, r7, r6
 800297a:	3614      	adds	r6, #20
 800297c:	f7ff f984 	bl	8001c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002980:	f5b6 6f8c 	cmp.w	r6, #1120	; 0x460
 8002984:	d1f8      	bne.n	8002978 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002986:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8002a4c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800298a:	4e26      	ldr	r6, [pc, #152]	; (8002a24 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 800298c:	4640      	mov	r0, r8
 800298e:	f7ff f97b 	bl	8001c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002992:	4630      	mov	r0, r6
 8002994:	f7ff f978 	bl	8001c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002998:	4823      	ldr	r0, [pc, #140]	; (8002a28 <prvAddNewTaskToReadyList+0xd4>)
 800299a:	f7ff f975 	bl	8001c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800299e:	4823      	ldr	r0, [pc, #140]	; (8002a2c <prvAddNewTaskToReadyList+0xd8>)
 80029a0:	f7ff f972 	bl	8001c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80029a4:	4822      	ldr	r0, [pc, #136]	; (8002a30 <prvAddNewTaskToReadyList+0xdc>)
 80029a6:	f7ff f96f 	bl	8001c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <prvAddNewTaskToReadyList+0xe0>)
 80029ac:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80029b0:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <prvAddNewTaskToReadyList+0xe4>)
 80029b2:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 80029b4:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <prvAddNewTaskToReadyList+0xe8>)
 80029b6:	6813      	ldr	r3, [r2, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80029bc:	4a20      	ldr	r2, [pc, #128]	; (8002a40 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029be:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80029c0:	6811      	ldr	r1, [r2, #0]
 80029c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029c4:	2014      	movs	r0, #20
 80029c6:	428b      	cmp	r3, r1
 80029c8:	fb00 7003 	mla	r0, r0, r3, r7
 80029cc:	f104 0104 	add.w	r1, r4, #4
 80029d0:	bf88      	it	hi
 80029d2:	6013      	strhi	r3, [r2, #0]
 80029d4:	f7ff f966 	bl	8001ca4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80029d8:	f7ff fa26 	bl	8001e28 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <prvAddNewTaskToReadyList+0xf0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b163      	cbz	r3, 80029fc <prvAddNewTaskToReadyList+0xa8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029e2:	682b      	ldr	r3, [r5, #0]
 80029e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d207      	bcs.n	80029fc <prvAddNewTaskToReadyList+0xa8>
			taskYIELD_IF_USING_PREEMPTION();
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <prvAddNewTaskToReadyList+0xf4>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <prvAddNewTaskToReadyList+0xf0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1d5      	bne.n	80029b4 <prvAddNewTaskToReadyList+0x60>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a0e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002a10:	bf98      	it	ls
 8002a12:	602c      	strls	r4, [r5, #0]
 8002a14:	e7ce      	b.n	80029b4 <prvAddNewTaskToReadyList+0x60>
 8002a16:	bf00      	nop
 8002a18:	20004770 	.word	0x20004770
 8002a1c:	20004304 	.word	0x20004304
 8002a20:	20004310 	.word	0x20004310
 8002a24:	2000479c 	.word	0x2000479c
 8002a28:	200047b8 	.word	0x200047b8
 8002a2c:	200047e4 	.word	0x200047e4
 8002a30:	200047d0 	.word	0x200047d0
 8002a34:	20004308 	.word	0x20004308
 8002a38:	2000430c 	.word	0x2000430c
 8002a3c:	20004780 	.word	0x20004780
 8002a40:	20004784 	.word	0x20004784
 8002a44:	200047cc 	.word	0x200047cc
 8002a48:	e000ed04 	.word	0xe000ed04
 8002a4c:	20004788 	.word	0x20004788

08002a50 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a50:	4a06      	ldr	r2, [pc, #24]	; (8002a6c <prvResetNextTaskUnblockTime+0x1c>)
 8002a52:	6813      	ldr	r3, [r2, #0]
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <prvResetNextTaskUnblockTime+0x20>)
 8002a58:	b919      	cbnz	r1, 8002a62 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002a5a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a66:	68d2      	ldr	r2, [r2, #12]
 8002a68:	6852      	ldr	r2, [r2, #4]
 8002a6a:	e7f8      	b.n	8002a5e <prvResetNextTaskUnblockTime+0xe>
 8002a6c:	20004308 	.word	0x20004308
 8002a70:	200047b0 	.word	0x200047b0

08002a74 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002a7a:	9f09      	ldr	r7, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a7c:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002a7e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a80:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002a82:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a84:	21a5      	movs	r1, #165	; 0xa5
 8002a86:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002a88:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a8a:	f001 f930 	bl	8003cee <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a90:	3e04      	subs	r6, #4
 8002a92:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a94:	f026 0607 	bic.w	r6, r6, #7
 8002a98:	1e6b      	subs	r3, r5, #1
 8002a9a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002a9e:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aa0:	7859      	ldrb	r1, [r3, #1]
 8002aa2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002aa6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002aaa:	b109      	cbz	r1, 8002ab0 <prvInitialiseNewTask.isra.2+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aac:	42ab      	cmp	r3, r5
 8002aae:	d1f7      	bne.n	8002aa0 <prvInitialiseNewTask.isra.2+0x2c>
 8002ab0:	9d08      	ldr	r5, [sp, #32]
 8002ab2:	2d37      	cmp	r5, #55	; 0x37
 8002ab4:	bf28      	it	cs
 8002ab6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ab8:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8002abc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002abe:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ac0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ac2:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002ac6:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aca:	f7ff f8e8 	bl	8001c9e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ace:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ad2:	f104 0018 	add.w	r0, r4, #24
 8002ad6:	f7ff f8e2 	bl	8001c9e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002ada:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ade:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ae2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ae4:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ae8:	464a      	mov	r2, r9
 8002aea:	4641      	mov	r1, r8
 8002aec:	4630      	mov	r0, r6
 8002aee:	f7ff f94b 	bl	8001d88 <pxPortInitialiseStack>
 8002af2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002af4:	b107      	cbz	r7, 8002af8 <prvInitialiseNewTask.isra.2+0x84>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002af6:	603c      	str	r4, [r7, #0]
 8002af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002afc <prvDeleteTCB>:
	{
 8002afc:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002afe:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 8002b02:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002b04:	b93b      	cbnz	r3, 8002b16 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8002b06:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002b08:	f7ff fb6a 	bl	80021e0 <vPortFree>
				vPortFree( pxTCB );
 8002b0c:	4620      	mov	r0, r4
	}
 8002b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002b12:	f7ff bb65 	b.w	80021e0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d0f9      	beq.n	8002b0e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d008      	beq.n	8002b30 <prvDeleteTCB+0x34>
	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	e7fe      	b.n	8002b2e <prvDeleteTCB+0x32>
 8002b30:	bd10      	pop	{r4, pc}
	...

08002b34 <prvIdleTask>:
{
 8002b34:	b580      	push	{r7, lr}
				taskYIELD();
 8002b36:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002b94 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b3a:	4f12      	ldr	r7, [pc, #72]	; (8002b84 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b3c:	4c12      	ldr	r4, [pc, #72]	; (8002b88 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002b3e:	4d13      	ldr	r5, [pc, #76]	; (8002b8c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	b963      	cbnz	r3, 8002b5e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <prvIdleTask+0x5c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d9f8      	bls.n	8002b3e <prvIdleTask+0xa>
				taskYIELD();
 8002b4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b50:	f8c8 3000 	str.w	r3, [r8]
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	e7ee      	b.n	8002b3c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002b5e:	f7ff f941 	bl	8001de4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b66:	1d30      	adds	r0, r6, #4
 8002b68:	f7ff f8bf 	bl	8001cea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002b78:	f7ff f956 	bl	8001e28 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	f7ff ffbd 	bl	8002afc <prvDeleteTCB>
 8002b82:	e7dd      	b.n	8002b40 <prvIdleTask+0xc>
 8002b84:	200047e4 	.word	0x200047e4
 8002b88:	20004774 	.word	0x20004774
 8002b8c:	20004770 	.word	0x20004770
 8002b90:	20004310 	.word	0x20004310
 8002b94:	e000ed04 	.word	0xe000ed04

08002b98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b9a:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b9c:	4d16      	ldr	r5, [pc, #88]	; (8002bf8 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 8002b9e:	681e      	ldr	r6, [r3, #0]
{
 8002ba0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba2:	6828      	ldr	r0, [r5, #0]
 8002ba4:	3004      	adds	r0, #4
{
 8002ba6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba8:	f7ff f89f 	bl	8001cea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bac:	1c63      	adds	r3, r4, #1
 8002bae:	462b      	mov	r3, r5
 8002bb0:	d107      	bne.n	8002bc2 <prvAddCurrentTaskToDelayedList+0x2a>
 8002bb2:	b137      	cbz	r7, 8002bc2 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bb4:	6829      	ldr	r1, [r5, #0]
 8002bb6:	4811      	ldr	r0, [pc, #68]	; (8002bfc <prvAddCurrentTaskToDelayedList+0x64>)
 8002bb8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002bba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bbe:	f7ff b871 	b.w	8001ca4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002bc2:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bc4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002bc6:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bc8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002bca:	d907      	bls.n	8002bdc <prvAddCurrentTaskToDelayedList+0x44>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <prvAddCurrentTaskToDelayedList+0x68>)
 8002bce:	6810      	ldr	r0, [r2, #0]
 8002bd0:	6819      	ldr	r1, [r3, #0]
}
 8002bd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd6:	3104      	adds	r1, #4
 8002bd8:	f7ff b870 	b.w	8001cbc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bdc:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <prvAddCurrentTaskToDelayedList+0x6c>)
 8002bde:	6810      	ldr	r0, [r2, #0]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	3104      	adds	r1, #4
 8002be4:	f7ff f86a 	bl	8001cbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002be8:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <prvAddCurrentTaskToDelayedList+0x70>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002bee:	bf38      	it	cc
 8002bf0:	601c      	strcc	r4, [r3, #0]
 8002bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bf4:	200047f8 	.word	0x200047f8
 8002bf8:	20004304 	.word	0x20004304
 8002bfc:	200047d0 	.word	0x200047d0
 8002c00:	2000430c 	.word	0x2000430c
 8002c04:	20004308 	.word	0x20004308
 8002c08:	200047b0 	.word	0x200047b0

08002c0c <xTaskCreateStatic>:
	{
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002c12:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002c14:	b945      	cbnz	r5, 8002c28 <xTaskCreateStatic+0x1c>
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	e7fe      	b.n	8002c26 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002c28:	b944      	cbnz	r4, 8002c3c <xTaskCreateStatic+0x30>
 8002c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2e:	f383 8811 	msr	BASEPRI, r3
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	f3bf 8f4f 	dsb	sy
 8002c3a:	e7fe      	b.n	8002c3a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c3c:	265c      	movs	r6, #92	; 0x5c
 8002c3e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c40:	9e04      	ldr	r6, [sp, #16]
 8002c42:	2e5c      	cmp	r6, #92	; 0x5c
 8002c44:	d008      	beq.n	8002c58 <xTaskCreateStatic+0x4c>
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	e7fe      	b.n	8002c56 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c58:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c5a:	2502      	movs	r5, #2
 8002c5c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c60:	ad05      	add	r5, sp, #20
 8002c62:	9501      	str	r5, [sp, #4]
 8002c64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002c66:	9402      	str	r4, [sp, #8]
 8002c68:	9500      	str	r5, [sp, #0]
 8002c6a:	f7ff ff03 	bl	8002a74 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff fe70 	bl	8002954 <prvAddNewTaskToReadyList>
	}
 8002c74:	9805      	ldr	r0, [sp, #20]
 8002c76:	b006      	add	sp, #24
 8002c78:	bd70      	pop	{r4, r5, r6, pc}

08002c7a <xTaskCreate>:
	{
 8002c7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c7e:	4607      	mov	r7, r0
 8002c80:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c82:	0090      	lsls	r0, r2, #2
	{
 8002c84:	4688      	mov	r8, r1
 8002c86:	4616      	mov	r6, r2
 8002c88:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8a:	f7ff fa1b 	bl	80020c4 <pvPortMalloc>
			if( pxStack != NULL )
 8002c8e:	4605      	mov	r5, r0
 8002c90:	b1e8      	cbz	r0, 8002cce <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002c92:	205c      	movs	r0, #92	; 0x5c
 8002c94:	f7ff fa16 	bl	80020c4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002c98:	4604      	mov	r4, r0
 8002c9a:	b1a8      	cbz	r0, 8002cc8 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8002ca4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002caa:	9002      	str	r0, [sp, #8]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	4632      	mov	r2, r6
 8002cb0:	464b      	mov	r3, r9
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	f7ff fedd 	bl	8002a74 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cba:	4620      	mov	r0, r4
 8002cbc:	f7ff fe4a 	bl	8002954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002cc0:	2001      	movs	r0, #1
	}
 8002cc2:	b005      	add	sp, #20
 8002cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f7ff fa89 	bl	80021e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cce:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8002cd2:	e7f6      	b.n	8002cc2 <xTaskCreate+0x48>

08002cd4 <vTaskStartScheduler>:
{
 8002cd4:	b510      	push	{r4, lr}
 8002cd6:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cd8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cda:	aa07      	add	r2, sp, #28
 8002cdc:	a906      	add	r1, sp, #24
 8002cde:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ce0:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ce2:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ce4:	f7fe ffb8 	bl	8001c58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ce8:	9b05      	ldr	r3, [sp, #20]
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	9b06      	ldr	r3, [sp, #24]
 8002cee:	9301      	str	r3, [sp, #4]
 8002cf0:	9400      	str	r4, [sp, #0]
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	9a07      	ldr	r2, [sp, #28]
 8002cf6:	4914      	ldr	r1, [pc, #80]	; (8002d48 <vTaskStartScheduler+0x74>)
 8002cf8:	4814      	ldr	r0, [pc, #80]	; (8002d4c <vTaskStartScheduler+0x78>)
 8002cfa:	f7ff ff87 	bl	8002c0c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002cfe:	b9a0      	cbnz	r0, 8002d2a <vTaskStartScheduler+0x56>
}
 8002d00:	b008      	add	sp, #32
 8002d02:	bd10      	pop	{r4, pc}
 8002d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d14:	4b0e      	ldr	r3, [pc, #56]	; (8002d50 <vTaskStartScheduler+0x7c>)
 8002d16:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <vTaskStartScheduler+0x80>)
 8002d1e:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <vTaskStartScheduler+0x84>)
 8002d22:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002d24:	f7ff f8f6 	bl	8001f14 <xPortStartScheduler>
 8002d28:	e7ea      	b.n	8002d00 <vTaskStartScheduler+0x2c>
			xReturn = xTimerCreateTimerTask();
 8002d2a:	f000 faff 	bl	800332c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002d2e:	2801      	cmp	r0, #1
 8002d30:	d0e8      	beq.n	8002d04 <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d32:	3001      	adds	r0, #1
 8002d34:	d1e4      	bne.n	8002d00 <vTaskStartScheduler+0x2c>
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	e7fe      	b.n	8002d46 <vTaskStartScheduler+0x72>
 8002d48:	08003d20 	.word	0x08003d20
 8002d4c:	08002b35 	.word	0x08002b35
 8002d50:	200047b0 	.word	0x200047b0
 8002d54:	200047cc 	.word	0x200047cc
 8002d58:	200047f8 	.word	0x200047f8

08002d5c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002d5c:	4a02      	ldr	r2, [pc, #8]	; (8002d68 <vTaskSuspendAll+0xc>)
 8002d5e:	6813      	ldr	r3, [r2, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000477c 	.word	0x2000477c

08002d6c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002d6c:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <xTaskGetTickCount+0x8>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	200047f8 	.word	0x200047f8

08002d78 <xTaskIncrementTick>:
{
 8002d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <xTaskIncrementTick+0xf4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d151      	bne.n	8002e28 <xTaskIncrementTick+0xb0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <xTaskIncrementTick+0xf8>)
 8002d86:	681c      	ldr	r4, [r3, #0]
 8002d88:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002d8a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d8c:	b9bc      	cbnz	r4, 8002dbe <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002d8e:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <xTaskIncrementTick+0xfc>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	b142      	cbz	r2, 8002da8 <xTaskIncrementTick+0x30>
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	e7fe      	b.n	8002da6 <xTaskIncrementTick+0x2e>
 8002da8:	4a33      	ldr	r2, [pc, #204]	; (8002e78 <xTaskIncrementTick+0x100>)
 8002daa:	6819      	ldr	r1, [r3, #0]
 8002dac:	6810      	ldr	r0, [r2, #0]
 8002dae:	6018      	str	r0, [r3, #0]
 8002db0:	6011      	str	r1, [r2, #0]
 8002db2:	4a32      	ldr	r2, [pc, #200]	; (8002e7c <xTaskIncrementTick+0x104>)
 8002db4:	6813      	ldr	r3, [r2, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	f7ff fe49 	bl	8002a50 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dbe:	4d30      	ldr	r5, [pc, #192]	; (8002e80 <xTaskIncrementTick+0x108>)
 8002dc0:	4f30      	ldr	r7, [pc, #192]	; (8002e84 <xTaskIncrementTick+0x10c>)
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	429c      	cmp	r4, r3
 8002dc6:	f04f 0b00 	mov.w	fp, #0
 8002dca:	d33c      	bcc.n	8002e46 <xTaskIncrementTick+0xce>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dcc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002e74 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8002dd0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8002e94 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd4:	f8d8 2000 	ldr.w	r2, [r8]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	bb62      	cbnz	r2, 8002e36 <xTaskIncrementTick+0xbe>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	602a      	str	r2, [r5, #0]
					break;
 8002de2:	e030      	b.n	8002e46 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002de4:	f106 0a04 	add.w	sl, r6, #4
 8002de8:	4650      	mov	r0, sl
 8002dea:	f7fe ff7e 	bl	8001cea <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002df0:	b119      	cbz	r1, 8002dfa <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002df2:	f106 0018 	add.w	r0, r6, #24
 8002df6:	f7fe ff78 	bl	8001cea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002dfa:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002dfc:	f8d9 1000 	ldr.w	r1, [r9]
 8002e00:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <xTaskIncrementTick+0x110>)
 8002e02:	4288      	cmp	r0, r1
 8002e04:	f04f 0214 	mov.w	r2, #20
 8002e08:	bf88      	it	hi
 8002e0a:	f8c9 0000 	strhi.w	r0, [r9]
 8002e0e:	4651      	mov	r1, sl
 8002e10:	fb02 3000 	mla	r0, r2, r0, r3
 8002e14:	f7fe ff46 	bl	8001ca4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e18:	6838      	ldr	r0, [r7, #0]
 8002e1a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002e1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002e1e:	4291      	cmp	r1, r2
 8002e20:	bf28      	it	cs
 8002e22:	f04f 0b01 	movcs.w	fp, #1
 8002e26:	e7d5      	b.n	8002dd4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <xTaskIncrementTick+0x114>)
 8002e2a:	6813      	ldr	r3, [r2, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8002e30:	f04f 0b00 	mov.w	fp, #0
 8002e34:	e011      	b.n	8002e5a <xTaskIncrementTick+0xe2>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e36:	f8d8 2000 	ldr.w	r2, [r8]
 8002e3a:	68d2      	ldr	r2, [r2, #12]
 8002e3c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002e3e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002e40:	428c      	cmp	r4, r1
 8002e42:	d2cf      	bcs.n	8002de4 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002e44:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <xTaskIncrementTick+0x110>)
 8002e4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e4c:	2214      	movs	r2, #20
 8002e4e:	434a      	muls	r2, r1
 8002e50:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002e52:	2a02      	cmp	r2, #2
 8002e54:	bf28      	it	cs
 8002e56:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002e5a:	4a0d      	ldr	r2, [pc, #52]	; (8002e90 <xTaskIncrementTick+0x118>)
 8002e5c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	bf18      	it	ne
 8002e62:	f04f 0b01 	movne.w	fp, #1
}
 8002e66:	4658      	mov	r0, fp
 8002e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e6c:	2000477c 	.word	0x2000477c
 8002e70:	200047f8 	.word	0x200047f8
 8002e74:	20004308 	.word	0x20004308
 8002e78:	2000430c 	.word	0x2000430c
 8002e7c:	200047b4 	.word	0x200047b4
 8002e80:	200047b0 	.word	0x200047b0
 8002e84:	20004304 	.word	0x20004304
 8002e88:	20004310 	.word	0x20004310
 8002e8c:	20004778 	.word	0x20004778
 8002e90:	200047fc 	.word	0x200047fc
 8002e94:	20004784 	.word	0x20004784

08002e98 <xTaskResumeAll>:
{
 8002e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8002e9c:	4c2f      	ldr	r4, [pc, #188]	; (8002f5c <xTaskResumeAll+0xc4>)
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	b943      	cbnz	r3, 8002eb4 <xTaskResumeAll+0x1c>
 8002ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	e7fe      	b.n	8002eb2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002eb4:	f7fe ff96 	bl	8001de4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ebe:	6824      	ldr	r4, [r4, #0]
 8002ec0:	b12c      	cbz	r4, 8002ece <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002ec2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002ec4:	f7fe ffb0 	bl	8001e28 <vPortExitCritical>
}
 8002ec8:	4620      	mov	r0, r4
 8002eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ece:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <xTaskResumeAll+0xc8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f5      	beq.n	8002ec2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ed6:	4e23      	ldr	r6, [pc, #140]	; (8002f64 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8002ed8:	4f23      	ldr	r7, [pc, #140]	; (8002f68 <xTaskResumeAll+0xd0>)
 8002eda:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002f7c <xTaskResumeAll+0xe4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ede:	6833      	ldr	r3, [r6, #0]
 8002ee0:	b9e3      	cbnz	r3, 8002f1c <xTaskResumeAll+0x84>
				if( pxTCB != NULL )
 8002ee2:	b10c      	cbz	r4, 8002ee8 <xTaskResumeAll+0x50>
					prvResetNextTaskUnblockTime();
 8002ee4:	f7ff fdb4 	bl	8002a50 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002ee8:	4d20      	ldr	r5, [pc, #128]	; (8002f6c <xTaskResumeAll+0xd4>)
 8002eea:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002eec:	b144      	cbz	r4, 8002f00 <xTaskResumeAll+0x68>
								xYieldPending = pdTRUE;
 8002eee:	4e20      	ldr	r6, [pc, #128]	; (8002f70 <xTaskResumeAll+0xd8>)
 8002ef0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002ef2:	f7ff ff41 	bl	8002d78 <xTaskIncrementTick>
 8002ef6:	b100      	cbz	r0, 8002efa <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8002ef8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002efa:	3c01      	subs	r4, #1
 8002efc:	d1f9      	bne.n	8002ef2 <xTaskResumeAll+0x5a>
						uxPendedTicks = 0;
 8002efe:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <xTaskResumeAll+0xd8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0dc      	beq.n	8002ec2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <xTaskResumeAll+0xdc>)
 8002f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002f18:	2401      	movs	r4, #1
 8002f1a:	e7d3      	b.n	8002ec4 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002f1c:	68f3      	ldr	r3, [r6, #12]
 8002f1e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f20:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f22:	f104 0018 	add.w	r0, r4, #24
 8002f26:	f7fe fee0 	bl	8001cea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f7fe fedd 	bl	8001cea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	2014      	movs	r0, #20
 8002f36:	4293      	cmp	r3, r2
 8002f38:	fb00 8003 	mla	r0, r0, r3, r8
 8002f3c:	4629      	mov	r1, r5
 8002f3e:	bf88      	it	hi
 8002f40:	603b      	strhi	r3, [r7, #0]
 8002f42:	f7fe feaf 	bl	8001ca4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <xTaskResumeAll+0xe0>)
 8002f48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002f50:	bf22      	ittt	cs
 8002f52:	4b07      	ldrcs	r3, [pc, #28]	; (8002f70 <xTaskResumeAll+0xd8>)
 8002f54:	2201      	movcs	r2, #1
 8002f56:	601a      	strcs	r2, [r3, #0]
 8002f58:	e7c1      	b.n	8002ede <xTaskResumeAll+0x46>
 8002f5a:	bf00      	nop
 8002f5c:	2000477c 	.word	0x2000477c
 8002f60:	20004770 	.word	0x20004770
 8002f64:	200047b8 	.word	0x200047b8
 8002f68:	20004784 	.word	0x20004784
 8002f6c:	20004778 	.word	0x20004778
 8002f70:	200047fc 	.word	0x200047fc
 8002f74:	e000ed04 	.word	0xe000ed04
 8002f78:	20004304 	.word	0x20004304
 8002f7c:	20004310 	.word	0x20004310

08002f80 <vTaskDelay>:
	{
 8002f80:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f82:	b940      	cbnz	r0, 8002f96 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <vTaskDelay+0x40>)
 8002f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002f96:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <vTaskDelay+0x44>)
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	b141      	cbz	r1, 8002fae <vTaskDelay+0x2e>
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	e7fe      	b.n	8002fac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002fae:	f7ff fed5 	bl	8002d5c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fb2:	f7ff fdf1 	bl	8002b98 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002fb6:	f7ff ff6f 	bl	8002e98 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d0e2      	beq.n	8002f84 <vTaskDelay+0x4>
 8002fbe:	bd08      	pop	{r3, pc}
 8002fc0:	e000ed04 	.word	0xe000ed04
 8002fc4:	2000477c 	.word	0x2000477c

08002fc8 <vTaskSwitchContext>:
{
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <vTaskSwitchContext+0x7c>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <vTaskSwitchContext+0x80>)
 8002fd0:	b112      	cbz	r2, 8002fd8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8002fd8:	4c1c      	ldr	r4, [pc, #112]	; (800304c <vTaskSwitchContext+0x84>)
		xYieldPending = pdFALSE;
 8002fda:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	6812      	ldr	r2, [r2, #0]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d804      	bhi.n	8002ff2 <vTaskSwitchContext+0x2a>
 8002fe8:	6820      	ldr	r0, [r4, #0]
 8002fea:	6821      	ldr	r1, [r4, #0]
 8002fec:	3134      	adds	r1, #52	; 0x34
 8002fee:	f000 fbb7 	bl	8003760 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ff2:	4e17      	ldr	r6, [pc, #92]	; (8003050 <vTaskSwitchContext+0x88>)
 8002ff4:	4a17      	ldr	r2, [pc, #92]	; (8003054 <vTaskSwitchContext+0x8c>)
 8002ff6:	6833      	ldr	r3, [r6, #0]
 8002ff8:	f04f 0e14 	mov.w	lr, #20
 8002ffc:	4617      	mov	r7, r2
 8002ffe:	fb0e f103 	mul.w	r1, lr, r3
 8003002:	1850      	adds	r0, r2, r1
 8003004:	5855      	ldr	r5, [r2, r1]
 8003006:	b185      	cbz	r5, 800302a <vTaskSwitchContext+0x62>
 8003008:	6845      	ldr	r5, [r0, #4]
 800300a:	3108      	adds	r1, #8
 800300c:	686d      	ldr	r5, [r5, #4]
 800300e:	6045      	str	r5, [r0, #4]
 8003010:	440a      	add	r2, r1
 8003012:	4295      	cmp	r5, r2
 8003014:	bf04      	itt	eq
 8003016:	686a      	ldreq	r2, [r5, #4]
 8003018:	6042      	streq	r2, [r0, #4]
 800301a:	2214      	movs	r2, #20
 800301c:	fb02 7203 	mla	r2, r2, r3, r7
 8003020:	6852      	ldr	r2, [r2, #4]
 8003022:	68d2      	ldr	r2, [r2, #12]
 8003024:	6022      	str	r2, [r4, #0]
 8003026:	6033      	str	r3, [r6, #0]
 8003028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800302a:	b943      	cbnz	r3, 800303e <vTaskSwitchContext+0x76>
 800302c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003030:	f383 8811 	msr	BASEPRI, r3
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	e7fe      	b.n	800303c <vTaskSwitchContext+0x74>
 800303e:	3b01      	subs	r3, #1
 8003040:	e7dd      	b.n	8002ffe <vTaskSwitchContext+0x36>
 8003042:	bf00      	nop
 8003044:	2000477c 	.word	0x2000477c
 8003048:	200047fc 	.word	0x200047fc
 800304c:	20004304 	.word	0x20004304
 8003050:	20004784 	.word	0x20004784
 8003054:	20004310 	.word	0x20004310

08003058 <vTaskPlaceOnEventList>:
{
 8003058:	b510      	push	{r4, lr}
 800305a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800305c:	b940      	cbnz	r0, 8003070 <vTaskPlaceOnEventList+0x18>
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	e7fe      	b.n	800306e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <vTaskPlaceOnEventList+0x30>)
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	3118      	adds	r1, #24
 8003076:	f7fe fe21 	bl	8001cbc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800307a:	4620      	mov	r0, r4
 800307c:	2101      	movs	r1, #1
}
 800307e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003082:	f7ff bd89 	b.w	8002b98 <prvAddCurrentTaskToDelayedList>
 8003086:	bf00      	nop
 8003088:	20004304 	.word	0x20004304

0800308c <vTaskPlaceOnEventListRestricted>:
	{
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	460d      	mov	r5, r1
 8003090:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8003092:	b940      	cbnz	r0, 80030a6 <vTaskPlaceOnEventListRestricted+0x1a>
 8003094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	e7fe      	b.n	80030a4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <vTaskPlaceOnEventListRestricted+0x38>)
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	3118      	adds	r1, #24
 80030ac:	f7fe fdfa 	bl	8001ca4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80030b0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030b2:	4621      	mov	r1, r4
 80030b4:	bf0c      	ite	eq
 80030b6:	4628      	moveq	r0, r5
 80030b8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80030bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030c0:	f7ff bd6a 	b.w	8002b98 <prvAddCurrentTaskToDelayedList>
 80030c4:	20004304 	.word	0x20004304

080030c8 <xTaskRemoveFromEventList>:
{
 80030c8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80030ca:	68c3      	ldr	r3, [r0, #12]
 80030cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80030ce:	b944      	cbnz	r4, 80030e2 <xTaskRemoveFromEventList+0x1a>
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	e7fe      	b.n	80030e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030e2:	f104 0518 	add.w	r5, r4, #24
 80030e6:	4628      	mov	r0, r5
 80030e8:	f7fe fdff 	bl	8001cea <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ec:	4b10      	ldr	r3, [pc, #64]	; (8003130 <xTaskRemoveFromEventList+0x68>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b9db      	cbnz	r3, 800312a <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030f2:	1d25      	adds	r5, r4, #4
 80030f4:	4628      	mov	r0, r5
 80030f6:	f7fe fdf8 	bl	8001cea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030fa:	4a0e      	ldr	r2, [pc, #56]	; (8003134 <xTaskRemoveFromEventList+0x6c>)
 80030fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030fe:	6811      	ldr	r1, [r2, #0]
 8003100:	428b      	cmp	r3, r1
 8003102:	bf88      	it	hi
 8003104:	6013      	strhi	r3, [r2, #0]
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <xTaskRemoveFromEventList+0x70>)
 8003108:	2014      	movs	r0, #20
 800310a:	4629      	mov	r1, r5
 800310c:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003110:	f7fe fdc8 	bl	8001ca4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <xTaskRemoveFromEventList+0x74>)
 8003116:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800311e:	bf83      	ittte	hi
 8003120:	4b07      	ldrhi	r3, [pc, #28]	; (8003140 <xTaskRemoveFromEventList+0x78>)
 8003122:	2001      	movhi	r0, #1
 8003124:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003126:	2000      	movls	r0, #0
}
 8003128:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800312a:	4629      	mov	r1, r5
 800312c:	4805      	ldr	r0, [pc, #20]	; (8003144 <xTaskRemoveFromEventList+0x7c>)
 800312e:	e7ef      	b.n	8003110 <xTaskRemoveFromEventList+0x48>
 8003130:	2000477c 	.word	0x2000477c
 8003134:	20004784 	.word	0x20004784
 8003138:	20004310 	.word	0x20004310
 800313c:	20004304 	.word	0x20004304
 8003140:	200047fc 	.word	0x200047fc
 8003144:	200047b8 	.word	0x200047b8

08003148 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <vTaskInternalSetTimeOutState+0x10>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800314e:	4b03      	ldr	r3, [pc, #12]	; (800315c <vTaskInternalSetTimeOutState+0x14>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6043      	str	r3, [r0, #4]
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	200047b4 	.word	0x200047b4
 800315c:	200047f8 	.word	0x200047f8

08003160 <xTaskCheckForTimeOut>:
{
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003164:	4605      	mov	r5, r0
 8003166:	b940      	cbnz	r0, 800317a <xTaskCheckForTimeOut+0x1a>
 8003168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	e7fe      	b.n	8003178 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800317a:	b941      	cbnz	r1, 800318e <xTaskCheckForTimeOut+0x2e>
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	e7fe      	b.n	800318c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800318e:	f7fe fe29 	bl	8001de4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003194:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003196:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	1c58      	adds	r0, r3, #1
 800319c:	d00e      	beq.n	80031bc <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800319e:	480d      	ldr	r0, [pc, #52]	; (80031d4 <xTaskCheckForTimeOut+0x74>)
 80031a0:	682e      	ldr	r6, [r5, #0]
 80031a2:	6800      	ldr	r0, [r0, #0]
 80031a4:	4286      	cmp	r6, r0
 80031a6:	d001      	beq.n	80031ac <xTaskCheckForTimeOut+0x4c>
 80031a8:	428a      	cmp	r2, r1
 80031aa:	d20e      	bcs.n	80031ca <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031ac:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d209      	bcs.n	80031c6 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80031b6:	4628      	mov	r0, r5
 80031b8:	f7ff ffc6 	bl	8003148 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80031bc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80031be:	f7fe fe33 	bl	8001e28 <vPortExitCritical>
}
 80031c2:	4620      	mov	r0, r4
 80031c4:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80031ca:	2401      	movs	r4, #1
 80031cc:	e7f7      	b.n	80031be <xTaskCheckForTimeOut+0x5e>
 80031ce:	bf00      	nop
 80031d0:	200047f8 	.word	0x200047f8
 80031d4:	200047b4 	.word	0x200047b4

080031d8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80031d8:	4b01      	ldr	r3, [pc, #4]	; (80031e0 <vTaskMissedYield+0x8>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	4770      	bx	lr
 80031e0:	200047fc 	.word	0x200047fc

080031e4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <xTaskGetSchedulerState+0x18>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	b133      	cbz	r3, 80031f8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <xTaskGetSchedulerState+0x1c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80031f0:	bf0c      	ite	eq
 80031f2:	2002      	moveq	r0, #2
 80031f4:	2000      	movne	r0, #0
 80031f6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031f8:	2001      	movs	r0, #1
	}
 80031fa:	4770      	bx	lr
 80031fc:	200047cc 	.word	0x200047cc
 8003200:	2000477c 	.word	0x2000477c

08003204 <xTaskPriorityDisinherit>:
	{
 8003204:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8003206:	4604      	mov	r4, r0
 8003208:	b908      	cbnz	r0, 800320e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800320a:	2000      	movs	r0, #0
 800320c:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800320e:	4b1b      	ldr	r3, [pc, #108]	; (800327c <xTaskPriorityDisinherit+0x78>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4298      	cmp	r0, r3
 8003214:	d008      	beq.n	8003228 <xTaskPriorityDisinherit+0x24>
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	e7fe      	b.n	8003226 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003228:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800322a:	b943      	cbnz	r3, 800323e <xTaskPriorityDisinherit+0x3a>
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	e7fe      	b.n	800323c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800323e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003240:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8003242:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003244:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003246:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003248:	d0df      	beq.n	800320a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1dd      	bne.n	800320a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800324e:	1d05      	adds	r5, r0, #4
 8003250:	4628      	mov	r0, r5
 8003252:	f7fe fd4a 	bl	8001cea <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003256:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003258:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800325e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003260:	4a07      	ldr	r2, [pc, #28]	; (8003280 <xTaskPriorityDisinherit+0x7c>)
 8003262:	6811      	ldr	r1, [r2, #0]
 8003264:	428b      	cmp	r3, r1
 8003266:	bf88      	it	hi
 8003268:	6013      	strhi	r3, [r2, #0]
 800326a:	4a06      	ldr	r2, [pc, #24]	; (8003284 <xTaskPriorityDisinherit+0x80>)
 800326c:	2014      	movs	r0, #20
 800326e:	fb00 2003 	mla	r0, r0, r3, r2
 8003272:	4629      	mov	r1, r5
 8003274:	f7fe fd16 	bl	8001ca4 <vListInsertEnd>
					xReturn = pdTRUE;
 8003278:	2001      	movs	r0, #1
	}
 800327a:	bd38      	pop	{r3, r4, r5, pc}
 800327c:	20004304 	.word	0x20004304
 8003280:	20004784 	.word	0x20004784
 8003284:	20004310 	.word	0x20004310

08003288 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800328a:	4c11      	ldr	r4, [pc, #68]	; (80032d0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800328c:	f7fe fdaa 	bl	8001de4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003290:	6825      	ldr	r5, [r4, #0]
 8003292:	b9bd      	cbnz	r5, 80032c4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003294:	4f0f      	ldr	r7, [pc, #60]	; (80032d4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8003296:	4e10      	ldr	r6, [pc, #64]	; (80032d8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8003298:	4638      	mov	r0, r7
 800329a:	f7fe fcf5 	bl	8001c88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800329e:	4630      	mov	r0, r6
 80032a0:	f7fe fcf2 	bl	8001c88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80032a4:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80032a6:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80032a8:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80032ac:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80032ae:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80032b0:	200a      	movs	r0, #10
 80032b2:	9500      	str	r5, [sp, #0]
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <prvCheckForValidListAndQueue+0x60>)
 80032b6:	f7ff f897 	bl	80023e8 <xQueueGenericCreateStatic>
 80032ba:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80032bc:	b110      	cbz	r0, 80032c4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80032be:	490b      	ldr	r1, [pc, #44]	; (80032ec <prvCheckForValidListAndQueue+0x64>)
 80032c0:	f7ff fb12 	bl	80028e8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80032c4:	b003      	add	sp, #12
 80032c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80032ca:	f7fe bdad 	b.w	8001e28 <vPortExitCritical>
 80032ce:	bf00      	nop
 80032d0:	20004924 	.word	0x20004924
 80032d4:	200048a8 	.word	0x200048a8
 80032d8:	200048bc 	.word	0x200048bc
 80032dc:	20004800 	.word	0x20004800
 80032e0:	20004808 	.word	0x20004808
 80032e4:	20004804 	.word	0x20004804
 80032e8:	200048d4 	.word	0x200048d4
 80032ec:	08003d25 	.word	0x08003d25

080032f0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80032f0:	4291      	cmp	r1, r2
{
 80032f2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80032f4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032f6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80032f8:	d80a      	bhi.n	8003310 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032fa:	1ad2      	subs	r2, r2, r3
 80032fc:	6983      	ldr	r3, [r0, #24]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d20d      	bcs.n	800331e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <prvInsertTimerInActiveList+0x34>)
 8003304:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	f7fe fcd8 	bl	8001cbc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800330c:	2000      	movs	r0, #0
 800330e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003310:	429a      	cmp	r2, r3
 8003312:	d201      	bcs.n	8003318 <prvInsertTimerInActiveList+0x28>
 8003314:	4299      	cmp	r1, r3
 8003316:	d202      	bcs.n	800331e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003318:	1d01      	adds	r1, r0, #4
 800331a:	4b03      	ldr	r3, [pc, #12]	; (8003328 <prvInsertTimerInActiveList+0x38>)
 800331c:	e7f3      	b.n	8003306 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800331e:	2001      	movs	r0, #1
}
 8003320:	bd08      	pop	{r3, pc}
 8003322:	bf00      	nop
 8003324:	20004804 	.word	0x20004804
 8003328:	20004800 	.word	0x20004800

0800332c <xTimerCreateTimerTask>:
{
 800332c:	b510      	push	{r4, lr}
 800332e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8003330:	f7ff ffaa 	bl	8003288 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8003334:	4b13      	ldr	r3, [pc, #76]	; (8003384 <xTimerCreateTimerTask+0x58>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	b943      	cbnz	r3, 800334c <xTimerCreateTimerTask+0x20>
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	e7fe      	b.n	800334a <xTimerCreateTimerTask+0x1e>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800334c:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800334e:	aa07      	add	r2, sp, #28
 8003350:	a906      	add	r1, sp, #24
 8003352:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003354:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003356:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003358:	f7fe fc8a 	bl	8001c70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800335c:	9b05      	ldr	r3, [sp, #20]
 800335e:	9302      	str	r3, [sp, #8]
 8003360:	9b06      	ldr	r3, [sp, #24]
 8003362:	9301      	str	r3, [sp, #4]
 8003364:	2302      	movs	r3, #2
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	9a07      	ldr	r2, [sp, #28]
 800336a:	4907      	ldr	r1, [pc, #28]	; (8003388 <xTimerCreateTimerTask+0x5c>)
 800336c:	4807      	ldr	r0, [pc, #28]	; (800338c <xTimerCreateTimerTask+0x60>)
 800336e:	4623      	mov	r3, r4
 8003370:	f7ff fc4c 	bl	8002c0c <xTaskCreateStatic>
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <xTimerCreateTimerTask+0x64>)
 8003376:	6018      	str	r0, [r3, #0]
	configASSERT( xReturn );
 8003378:	2800      	cmp	r0, #0
 800337a:	d0de      	beq.n	800333a <xTimerCreateTimerTask+0xe>
}
 800337c:	2001      	movs	r0, #1
 800337e:	b008      	add	sp, #32
 8003380:	bd10      	pop	{r4, pc}
 8003382:	bf00      	nop
 8003384:	20004924 	.word	0x20004924
 8003388:	08003d2a 	.word	0x08003d2a
 800338c:	08003469 	.word	0x08003469
 8003390:	20004928 	.word	0x20004928

08003394 <xTimerGenericCommand>:
{
 8003394:	b530      	push	{r4, r5, lr}
 8003396:	4615      	mov	r5, r2
 8003398:	b085      	sub	sp, #20
 800339a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800339c:	4603      	mov	r3, r0
 800339e:	b940      	cbnz	r0, 80033b2 <xTimerGenericCommand+0x1e>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	e7fe      	b.n	80033b0 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 80033b2:	4c0d      	ldr	r4, [pc, #52]	; (80033e8 <xTimerGenericCommand+0x54>)
 80033b4:	6820      	ldr	r0, [r4, #0]
 80033b6:	b180      	cbz	r0, 80033da <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80033b8:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80033ba:	e88d 0022 	stmia.w	sp, {r1, r5}
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80033be:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80033c0:	dc0d      	bgt.n	80033de <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80033c2:	f7ff ff0f 	bl	80031e4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80033c6:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80033c8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80033ca:	bf08      	it	eq
 80033cc:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	bf18      	it	ne
 80033d2:	461a      	movne	r2, r3
 80033d4:	4669      	mov	r1, sp
 80033d6:	f7ff f87b 	bl	80024d0 <xQueueGenericSend>
}
 80033da:	b005      	add	sp, #20
 80033dc:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80033de:	2300      	movs	r3, #0
 80033e0:	4669      	mov	r1, sp
 80033e2:	f7ff f92b 	bl	800263c <xQueueGenericSendFromISR>
 80033e6:	e7f8      	b.n	80033da <xTimerGenericCommand+0x46>
 80033e8:	20004924 	.word	0x20004924

080033ec <prvSwitchTimerLists>:
{
 80033ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033f0:	4d1b      	ldr	r5, [pc, #108]	; (8003460 <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033f2:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033f6:	682b      	ldr	r3, [r5, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	b932      	cbnz	r2, 800340a <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80033fc:	4a19      	ldr	r2, [pc, #100]	; (8003464 <prvSwitchTimerLists+0x78>)
 80033fe:	6811      	ldr	r1, [r2, #0]
 8003400:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	b002      	add	sp, #8
 8003406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800340a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800340c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800340e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003410:	1d27      	adds	r7, r4, #4
 8003412:	4638      	mov	r0, r7
 8003414:	f7fe fc69 	bl	8001cea <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800341a:	4620      	mov	r0, r4
 800341c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800341e:	69e3      	ldr	r3, [r4, #28]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d1e8      	bne.n	80033f6 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003424:	69a3      	ldr	r3, [r4, #24]
 8003426:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8003428:	429e      	cmp	r6, r3
 800342a:	d206      	bcs.n	800343a <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800342c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800342e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003430:	4639      	mov	r1, r7
 8003432:	6828      	ldr	r0, [r5, #0]
 8003434:	f7fe fc42 	bl	8001cbc <vListInsert>
 8003438:	e7dd      	b.n	80033f6 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800343a:	2300      	movs	r3, #0
 800343c:	f8cd 8000 	str.w	r8, [sp]
 8003440:	4632      	mov	r2, r6
 8003442:	4619      	mov	r1, r3
 8003444:	4620      	mov	r0, r4
 8003446:	f7ff ffa5 	bl	8003394 <xTimerGenericCommand>
				configASSERT( xResult );
 800344a:	2800      	cmp	r0, #0
 800344c:	d1d3      	bne.n	80033f6 <prvSwitchTimerLists+0xa>
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	e7fe      	b.n	800345e <prvSwitchTimerLists+0x72>
 8003460:	20004800 	.word	0x20004800
 8003464:	20004804 	.word	0x20004804

08003468 <prvTimerTask>:
{
 8003468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800346c:	4d72      	ldr	r5, [pc, #456]	; (8003638 <prvTimerTask+0x1d0>)
					portYIELD_WITHIN_API();
 800346e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8003648 <prvTimerTask+0x1e0>
{
 8003472:	b089      	sub	sp, #36	; 0x24
 8003474:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003476:	682b      	ldr	r3, [r5, #0]
 8003478:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 800347c:	f1bb 0f00 	cmp.w	fp, #0
 8003480:	d044      	beq.n	800350c <prvTimerTask+0xa4>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f8d3 9000 	ldr.w	r9, [r3]
	vTaskSuspendAll();
 8003488:	f7ff fc68 	bl	8002d5c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800348c:	f7ff fc6e 	bl	8002d6c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003490:	4b6a      	ldr	r3, [pc, #424]	; (800363c <prvTimerTask+0x1d4>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8003496:	4682      	mov	sl, r0
 8003498:	461e      	mov	r6, r3
	if( xTimeNow < xLastTime )
 800349a:	d239      	bcs.n	8003510 <prvTimerTask+0xa8>
 800349c:	9303      	str	r3, [sp, #12]
		prvSwitchTimerLists();
 800349e:	f7ff ffa5 	bl	80033ec <prvSwitchTimerLists>
 80034a2:	9b03      	ldr	r3, [sp, #12]
		*pxTimerListsWereSwitched = pdTRUE;
 80034a4:	2401      	movs	r4, #1
	xLastTime = xTimeNow;
 80034a6:	f8c3 a000 	str.w	sl, [r3]
		if( xTimerListsWereSwitched == pdFALSE )
 80034aa:	2c00      	cmp	r4, #0
 80034ac:	f040 808a 	bne.w	80035c4 <prvTimerTask+0x15c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034b0:	f1bb 0f00 	cmp.w	fp, #0
 80034b4:	d06b      	beq.n	800358e <prvTimerTask+0x126>
 80034b6:	45d1      	cmp	r9, sl
 80034b8:	f200 8082 	bhi.w	80035c0 <prvTimerTask+0x158>
				( void ) xTaskResumeAll();
 80034bc:	f7ff fcec 	bl	8002e98 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034c8:	f10b 0004 	add.w	r0, fp, #4
 80034cc:	f7fe fc0d 	bl	8001cea <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80034d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d11d      	bne.n	8003514 <prvTimerTask+0xac>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80034d8:	f8db 1018 	ldr.w	r1, [fp, #24]
 80034dc:	464b      	mov	r3, r9
 80034de:	4652      	mov	r2, sl
 80034e0:	4449      	add	r1, r9
 80034e2:	4658      	mov	r0, fp
 80034e4:	f7ff ff04 	bl	80032f0 <prvInsertTimerInActiveList>
 80034e8:	b1a0      	cbz	r0, 8003514 <prvTimerTask+0xac>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034ea:	9400      	str	r4, [sp, #0]
 80034ec:	4623      	mov	r3, r4
 80034ee:	464a      	mov	r2, r9
 80034f0:	4621      	mov	r1, r4
 80034f2:	4658      	mov	r0, fp
 80034f4:	f7ff ff4e 	bl	8003394 <xTimerGenericCommand>
			configASSERT( xResult );
 80034f8:	b960      	cbnz	r0, 8003514 <prvTimerTask+0xac>
 80034fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	e7fe      	b.n	800350a <prvTimerTask+0xa2>
		xNextExpireTime = ( TickType_t ) 0U;
 800350c:	46d9      	mov	r9, fp
 800350e:	e7bb      	b.n	8003488 <prvTimerTask+0x20>
		*pxTimerListsWereSwitched = pdFALSE;
 8003510:	2400      	movs	r4, #0
 8003512:	e7c8      	b.n	80034a6 <prvTimerTask+0x3e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003514:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8003518:	4658      	mov	r0, fp
 800351a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800351c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8003644 <prvTimerTask+0x1dc>
 8003520:	f8d9 0000 	ldr.w	r0, [r9]
 8003524:	2200      	movs	r2, #0
 8003526:	a904      	add	r1, sp, #16
 8003528:	f7ff f8ea 	bl	8002700 <xQueueReceive>
 800352c:	2800      	cmp	r0, #0
 800352e:	d0a2      	beq.n	8003476 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003530:	9b04      	ldr	r3, [sp, #16]
 8003532:	2b00      	cmp	r3, #0
 8003534:	da03      	bge.n	800353e <prvTimerTask+0xd6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003536:	9907      	ldr	r1, [sp, #28]
 8003538:	9806      	ldr	r0, [sp, #24]
 800353a:	9b05      	ldr	r3, [sp, #20]
 800353c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800353e:	9b04      	ldr	r3, [sp, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	dbed      	blt.n	8003520 <prvTimerTask+0xb8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003544:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003546:	6963      	ldr	r3, [r4, #20]
 8003548:	b113      	cbz	r3, 8003550 <prvTimerTask+0xe8>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800354a:	1d20      	adds	r0, r4, #4
 800354c:	f7fe fbcd 	bl	8001cea <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003550:	f7ff fc0c 	bl	8002d6c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003554:	6833      	ldr	r3, [r6, #0]
 8003556:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003558:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 800355a:	d201      	bcs.n	8003560 <prvTimerTask+0xf8>
		prvSwitchTimerLists();
 800355c:	f7ff ff46 	bl	80033ec <prvSwitchTimerLists>
 8003560:	9a04      	ldr	r2, [sp, #16]
	xLastTime = xTimeNow;
 8003562:	f8c6 b000 	str.w	fp, [r6]
 8003566:	2a09      	cmp	r2, #9
 8003568:	d8da      	bhi.n	8003520 <prvTimerTask+0xb8>
 800356a:	2301      	movs	r3, #1
 800356c:	4093      	lsls	r3, r2
 800356e:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8003572:	d14e      	bne.n	8003612 <prvTimerTask+0x1aa>
 8003574:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8003578:	d127      	bne.n	80035ca <prvTimerTask+0x162>
 800357a:	069b      	lsls	r3, r3, #26
 800357c:	d5d0      	bpl.n	8003520 <prvTimerTask+0xb8>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800357e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1cc      	bne.n	8003520 <prvTimerTask+0xb8>
							vPortFree( pxTimer );
 8003586:	4620      	mov	r0, r4
 8003588:	f7fe fe2a 	bl	80021e0 <vPortFree>
 800358c:	e7c8      	b.n	8003520 <prvTimerTask+0xb8>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800358e:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <prvTimerTask+0x1d8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800359a:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <prvTimerTask+0x1dc>)
 800359c:	eba9 010a 	sub.w	r1, r9, sl
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	f7ff f9b3 	bl	800290c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80035a6:	f7ff fc77 	bl	8002e98 <xTaskResumeAll>
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d1b6      	bne.n	800351c <prvTimerTask+0xb4>
					portYIELD_WITHIN_API();
 80035ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035b2:	f8c8 3000 	str.w	r3, [r8]
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	e7ad      	b.n	800351c <prvTimerTask+0xb4>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035c0:	4622      	mov	r2, r4
 80035c2:	e7ea      	b.n	800359a <prvTimerTask+0x132>
			( void ) xTaskResumeAll();
 80035c4:	f7ff fc68 	bl	8002e98 <xTaskResumeAll>
 80035c8:	e7a8      	b.n	800351c <prvTimerTask+0xb4>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80035ca:	69a1      	ldr	r1, [r4, #24]
 80035cc:	9b05      	ldr	r3, [sp, #20]
 80035ce:	465a      	mov	r2, fp
 80035d0:	4419      	add	r1, r3
 80035d2:	4620      	mov	r0, r4
 80035d4:	f7ff fe8c 	bl	80032f0 <prvInsertTimerInActiveList>
 80035d8:	2800      	cmp	r0, #0
 80035da:	d0a1      	beq.n	8003520 <prvTimerTask+0xb8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035de:	4620      	mov	r0, r4
 80035e0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80035e2:	69e3      	ldr	r3, [r4, #28]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d19b      	bne.n	8003520 <prvTimerTask+0xb8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80035e8:	69a2      	ldr	r2, [r4, #24]
 80035ea:	9905      	ldr	r1, [sp, #20]
 80035ec:	f8cd a000 	str.w	sl, [sp]
 80035f0:	440a      	add	r2, r1
 80035f2:	4653      	mov	r3, sl
 80035f4:	4651      	mov	r1, sl
 80035f6:	4620      	mov	r0, r4
 80035f8:	f7ff fecc 	bl	8003394 <xTimerGenericCommand>
							configASSERT( xResult );
 80035fc:	2800      	cmp	r0, #0
 80035fe:	d18f      	bne.n	8003520 <prvTimerTask+0xb8>
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	e7fe      	b.n	8003610 <prvTimerTask+0x1a8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003612:	9905      	ldr	r1, [sp, #20]
 8003614:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003616:	b941      	cbnz	r1, 800362a <prvTimerTask+0x1c2>
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	e7fe      	b.n	8003628 <prvTimerTask+0x1c0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800362a:	465b      	mov	r3, fp
 800362c:	465a      	mov	r2, fp
 800362e:	4459      	add	r1, fp
 8003630:	4620      	mov	r0, r4
 8003632:	f7ff fe5d 	bl	80032f0 <prvInsertTimerInActiveList>
 8003636:	e773      	b.n	8003520 <prvTimerTask+0xb8>
 8003638:	20004800 	.word	0x20004800
 800363c:	200048d0 	.word	0x200048d0
 8003640:	20004804 	.word	0x20004804
 8003644:	20004924 	.word	0x20004924
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <C2C_HwResetAndPowerUp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void C2C_HwResetAndPowerUp(void)
{
 800364c:	b510      	push	{r4, lr}
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800364e:	4c14      	ldr	r4, [pc, #80]	; (80036a0 <C2C_HwResetAndPowerUp+0x54>)
 8003650:	2201      	movs	r2, #1
 8003652:	2110      	movs	r1, #16
 8003654:	4620      	mov	r0, r4
 8003656:	f7fd fa5d 	bl	8000b14 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800365a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800365e:	f7fc ff73 	bl	8000548 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003662:	2200      	movs	r2, #0
 8003664:	2110      	movs	r1, #16
 8003666:	4620      	mov	r0, r4
 8003668:	f7fd fa54 	bl	8000b14 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800366c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	  HAL_Delay(1000);
 8003670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003674:	f7fc ff68 	bl	8000548 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8003678:	2201      	movs	r2, #1
 800367a:	2108      	movs	r1, #8
 800367c:	4620      	mov	r0, r4
 800367e:	f7fd fa49 	bl	8000b14 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8003682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003686:	f7fc ff5f 	bl	8000548 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800368a:	4620      	mov	r0, r4
 800368c:	2200      	movs	r2, #0
 800368e:	2108      	movs	r1, #8
 8003690:	f7fd fa40 	bl	8000b14 <HAL_GPIO_WritePin>
	  /* Waits for Modem complete its booting procedure */
	  HAL_Delay(5000);
 8003694:	f241 3088 	movw	r0, #5000	; 0x1388
}
 8003698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_Delay(5000);
 800369c:	f7fc bf54 	b.w	8000548 <HAL_Delay>
 80036a0:	40020000 	.word	0x40020000

080036a4 <printMsg>:

void printMsg(char* data, int len)
{
 80036a4:	b510      	push	{r4, lr}
	for(int i = 0; i<len; i++)
 80036a6:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80036a8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80036ac:	428b      	cmp	r3, r1
 80036ae:	db00      	blt.n	80036b2 <printMsg+0xe>
	{
		ITM_SendChar(data[i]);
	}
}
 80036b0:	bd10      	pop	{r4, pc}
 80036b2:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	; 0xe80
 80036b6:	07e4      	lsls	r4, r4, #31
 80036b8:	d503      	bpl.n	80036c2 <printMsg+0x1e>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80036ba:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80036be:	07e4      	lsls	r4, r4, #31
 80036c0:	d402      	bmi.n	80036c8 <printMsg+0x24>
	for(int i = 0; i<len; i++)
 80036c2:	3301      	adds	r3, #1
 80036c4:	e7f2      	b.n	80036ac <printMsg+0x8>
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80036c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80036c8:	6814      	ldr	r4, [r2, #0]
 80036ca:	2c00      	cmp	r4, #0
 80036cc:	d0fb      	beq.n	80036c6 <printMsg+0x22>
		ITM_SendChar(data[i]);
 80036ce:	5cc4      	ldrb	r4, [r0, r3]
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80036d0:	7014      	strb	r4, [r2, #0]
 80036d2:	e7f6      	b.n	80036c2 <printMsg+0x1e>

080036d4 <MyTask>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	osMessageQueuePut(rxQueue, (uint8_t*)&cIn, 0, 0);
}
void MyTask(void *argument)
{
 80036d4:	b508      	push	{r3, lr}
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)&cIn, 1);
 80036d6:	2201      	movs	r2, #1
 80036d8:	490a      	ldr	r1, [pc, #40]	; (8003704 <MyTask+0x30>)
 80036da:	480b      	ldr	r0, [pc, #44]	; (8003708 <MyTask+0x34>)
	while(1)
	{
		printMsg("AT\r\n", 4);
 80036dc:	4c0b      	ldr	r4, [pc, #44]	; (800370c <MyTask+0x38>)
		HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 100);
 80036de:	4d0a      	ldr	r5, [pc, #40]	; (8003708 <MyTask+0x34>)
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)&cIn, 1);
 80036e0:	f7fd ffbc 	bl	800165c <HAL_UART_Receive_DMA>
		printMsg("AT\r\n", 4);
 80036e4:	4620      	mov	r0, r4
 80036e6:	2104      	movs	r1, #4
 80036e8:	f7ff ffdc 	bl	80036a4 <printMsg>
		HAL_UART_Transmit(&huart2, (uint8_t*)"AT\r\n", 4, 100);
 80036ec:	2364      	movs	r3, #100	; 0x64
 80036ee:	2204      	movs	r2, #4
 80036f0:	4621      	mov	r1, r4
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7fd ff54 	bl	80015a0 <HAL_UART_Transmit>
		osDelay(1000);
 80036f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036fc:	f7fe f9c4 	bl	8001a88 <osDelay>
 8003700:	e7f0      	b.n	80036e4 <MyTask+0x10>
 8003702:	bf00      	nop
 8003704:	200049d8 	.word	0x200049d8
 8003708:	20004a40 	.word	0x20004a40
 800370c:	08003d32 	.word	0x08003d32

08003710 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003710:	b570      	push	{r4, r5, r6, lr}
    
    
    

  /* USER CODE BEGIN 5 */
	char data = 0;
 8003712:	2400      	movs	r4, #0
{
 8003714:	b092      	sub	sp, #72	; 0x48
	char dataLine[64] = {0};
 8003716:	2240      	movs	r2, #64	; 0x40
 8003718:	4621      	mov	r1, r4
 800371a:	a802      	add	r0, sp, #8
	char data = 0;
 800371c:	f88d 4007 	strb.w	r4, [sp, #7]
	char dataLine[64] = {0};
 8003720:	f000 fae5 	bl	8003cee <memset>
	uint8_t idx = 0;
  /* Infinite loop */
  for(;;)
  {
	if(osMessageQueueGet(rxQueue, &data, 0, 0) == osOK)
 8003724:	4e0d      	ldr	r6, [pc, #52]	; (800375c <StartDefaultTask+0x4c>)
 8003726:	6830      	ldr	r0, [r6, #0]
 8003728:	2300      	movs	r3, #0
 800372a:	461a      	mov	r2, r3
 800372c:	f10d 0107 	add.w	r1, sp, #7
 8003730:	f7fe fa50 	bl	8001bd4 <osMessageQueueGet>
 8003734:	4605      	mov	r5, r0
 8003736:	2800      	cmp	r0, #0
 8003738:	d1f5      	bne.n	8003726 <StartDefaultTask+0x16>
	{
		if(data != '\n')
 800373a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800373e:	2b0a      	cmp	r3, #10
 8003740:	d006      	beq.n	8003750 <StartDefaultTask+0x40>
		{
			dataLine[idx++] = data;
 8003742:	a912      	add	r1, sp, #72	; 0x48
 8003744:	1c62      	adds	r2, r4, #1
 8003746:	440c      	add	r4, r1
 8003748:	f804 3c40 	strb.w	r3, [r4, #-64]
 800374c:	b2d4      	uxtb	r4, r2
 800374e:	e7ea      	b.n	8003726 <StartDefaultTask+0x16>
		}
		else
		{
			printMsg(dataLine, idx);
 8003750:	4621      	mov	r1, r4
 8003752:	a802      	add	r0, sp, #8
 8003754:	f7ff ffa6 	bl	80036a4 <printMsg>
			idx = 0;
 8003758:	462c      	mov	r4, r5
 800375a:	e7e4      	b.n	8003726 <StartDefaultTask+0x16>
 800375c:	200049d4 	.word	0x200049d4

08003760 <vApplicationStackOverflowHook>:
{
 8003760:	b510      	push	{r4, lr}
	printMsg("Task Overflow: ", strlen("Task Overflow: "));
 8003762:	4809      	ldr	r0, [pc, #36]	; (8003788 <vApplicationStackOverflowHook+0x28>)
{
 8003764:	460c      	mov	r4, r1
	printMsg("Task Overflow: ", strlen("Task Overflow: "));
 8003766:	210f      	movs	r1, #15
 8003768:	f7ff ff9c 	bl	80036a4 <printMsg>
	printMsg((char*)pcTaskName,strlen((char*)pcTaskName));
 800376c:	4620      	mov	r0, r4
 800376e:	f7fc fd2f 	bl	80001d0 <strlen>
 8003772:	4601      	mov	r1, r0
 8003774:	4620      	mov	r0, r4
 8003776:	f7ff ff95 	bl	80036a4 <printMsg>
	printMsg("\r\n",2);
 800377a:	2102      	movs	r1, #2
 800377c:	4803      	ldr	r0, [pc, #12]	; (800378c <vApplicationStackOverflowHook+0x2c>)
}
 800377e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printMsg("\r\n",2);
 8003782:	f7ff bf8f 	b.w	80036a4 <printMsg>
 8003786:	bf00      	nop
 8003788:	08003d4a 	.word	0x08003d4a
 800378c:	08003d34 	.word	0x08003d34

08003790 <SystemClock_Config>:
{
 8003790:	b530      	push	{r4, r5, lr}
 8003792:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003794:	2230      	movs	r2, #48	; 0x30
 8003796:	2100      	movs	r1, #0
 8003798:	a808      	add	r0, sp, #32
 800379a:	f000 faa8 	bl	8003cee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800379e:	2100      	movs	r1, #0
 80037a0:	2214      	movs	r2, #20
 80037a2:	a803      	add	r0, sp, #12
 80037a4:	f000 faa3 	bl	8003cee <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80037a8:	2500      	movs	r5, #0
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <SystemClock_Config+0x88>)
 80037ac:	9501      	str	r5, [sp, #4]
 80037ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
 80037b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037bc:	9301      	str	r3, [sp, #4]
 80037be:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037c0:	4b16      	ldr	r3, [pc, #88]	; (800381c <SystemClock_Config+0x8c>)
 80037c2:	9502      	str	r5, [sp, #8]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037ce:	950f      	str	r5, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037d8:	2301      	movs	r3, #1
 80037da:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037dc:	2310      	movs	r3, #16
 80037de:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037e0:	2308      	movs	r3, #8
 80037e2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80037e4:	2350      	movs	r3, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037e6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 80;
 80037e8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ea:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037ec:	2304      	movs	r3, #4
 80037ee:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037f0:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037f2:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037f4:	9412      	str	r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037f6:	f7fd f993 	bl	8000b20 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037fa:	230f      	movs	r3, #15
 80037fc:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037fe:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003804:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003806:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003808:	9505      	str	r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800380a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800380c:	9507      	str	r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800380e:	f7fd fb37 	bl	8000e80 <HAL_RCC_ClockConfig>
}
 8003812:	b015      	add	sp, #84	; 0x54
 8003814:	bd30      	pop	{r4, r5, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000

08003820 <main>:
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b098      	sub	sp, #96	; 0x60
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003824:	2400      	movs	r4, #0
 8003826:	4d5d      	ldr	r5, [pc, #372]	; (800399c <main+0x17c>)
  HAL_Init();
 8003828:	f7fc fe62 	bl	80004f0 <HAL_Init>
  SystemClock_Config();
 800382c:	f7ff ffb0 	bl	8003790 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	2214      	movs	r2, #20
 8003832:	2100      	movs	r1, #0
 8003834:	a80f      	add	r0, sp, #60	; 0x3c
 8003836:	f000 fa5a 	bl	8003cee <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800383a:	9402      	str	r4, [sp, #8]
 800383c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800383e:	4858      	ldr	r0, [pc, #352]	; (80039a0 <main+0x180>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003844:	632b      	str	r3, [r5, #48]	; 0x30
 8003846:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	9302      	str	r3, [sp, #8]
 800384e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003850:	9403      	str	r4, [sp, #12]
 8003852:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003854:	f043 0304 	orr.w	r3, r3, #4
 8003858:	632b      	str	r3, [r5, #48]	; 0x30
 800385a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	9303      	str	r3, [sp, #12]
 8003862:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003864:	9404      	str	r4, [sp, #16]
 8003866:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	632b      	str	r3, [r5, #48]	; 0x30
 800386e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	9304      	str	r3, [sp, #16]
 8003876:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003878:	9405      	str	r4, [sp, #20]
 800387a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800387c:	f043 0302 	orr.w	r3, r3, #2
 8003880:	632b      	str	r3, [r5, #48]	; 0x30
 8003882:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800388a:	4622      	mov	r2, r4
 800388c:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800388e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8003890:	f7fd f940 	bl	8000b14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003894:	4622      	mov	r2, r4
 8003896:	2110      	movs	r1, #16
 8003898:	4842      	ldr	r0, [pc, #264]	; (80039a4 <main+0x184>)
 800389a:	f7fd f93b 	bl	8000b14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800389e:	4622      	mov	r2, r4
 80038a0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80038a4:	4840      	ldr	r0, [pc, #256]	; (80039a8 <main+0x188>)
 80038a6:	f7fd f935 	bl	8000b14 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038aa:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038ac:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ae:	a90f      	add	r1, sp, #60	; 0x3c
 80038b0:	483b      	ldr	r0, [pc, #236]	; (80039a0 <main+0x180>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038b2:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038b4:	2710      	movs	r7, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038b6:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b8:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ba:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038bc:	f7fd f84a 	bl	8000954 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c0:	a90f      	add	r1, sp, #60	; 0x3c
 80038c2:	4838      	ldr	r0, [pc, #224]	; (80039a4 <main+0x184>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c4:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038c6:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ca:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038cc:	f7fd f842 	bl	8000954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80038d0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038d4:	a90f      	add	r1, sp, #60	; 0x3c
 80038d6:	4834      	ldr	r0, [pc, #208]	; (80039a8 <main+0x188>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80038d8:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038da:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038de:	9412      	str	r4, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e0:	f7fd f838 	bl	8000954 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038e4:	9401      	str	r4, [sp, #4]
 80038e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80038e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038ec:	632b      	str	r3, [r5, #48]	; 0x30
 80038ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80038f4:	4622      	mov	r2, r4
 80038f6:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038f8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80038fa:	4638      	mov	r0, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038fc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80038fe:	f7fc fe49 	bl	8000594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003902:	4638      	mov	r0, r7
 8003904:	f7fc fe7a 	bl	80005fc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8003908:	2105      	movs	r1, #5
 800390a:	4622      	mov	r2, r4
 800390c:	2011      	movs	r0, #17
 800390e:	f7fc fe41 	bl	8000594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003912:	2011      	movs	r0, #17
 8003914:	f7fc fe72 	bl	80005fc <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8003918:	4824      	ldr	r0, [pc, #144]	; (80039ac <main+0x18c>)
  huart2.Init.BaudRate = 115200;
 800391a:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <main+0x190>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800391c:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800391e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003922:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003926:	230c      	movs	r3, #12
 8003928:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800392a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800392c:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800392e:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003930:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003932:	f7fd fe07 	bl	8001544 <HAL_UART_Init>
  C2C_HwResetAndPowerUp();
 8003936:	f7ff fe89 	bl	800364c <C2C_HwResetAndPowerUp>
  osKernelInitialize();
 800393a:	f7fe f809 	bl	8001950 <osKernelInitialize>
  	rxQueue = osMessageQueueNew (256, 1, NULL);
 800393e:	4631      	mov	r1, r6
 8003940:	4622      	mov	r2, r4
 8003942:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003946:	f7fe f8b9 	bl	8001abc <osMessageQueueNew>
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <main+0x194>)
  const osThreadAttr_t defaultTask_attributes = {
 800394c:	2518      	movs	r5, #24
  	rxQueue = osMessageQueueNew (256, 1, NULL);
 800394e:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t defaultTask_attributes = {
 8003950:	2224      	movs	r2, #36	; 0x24
 8003952:	4621      	mov	r1, r4
 8003954:	a806      	add	r0, sp, #24
 8003956:	f000 f9ca 	bl	8003cee <memset>
 800395a:	2680      	movs	r6, #128	; 0x80
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <main+0x198>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800395e:	4817      	ldr	r0, [pc, #92]	; (80039bc <main+0x19c>)
  const osThreadAttr_t defaultTask_attributes = {
 8003960:	9306      	str	r3, [sp, #24]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003962:	eb0d 0205 	add.w	r2, sp, r5
 8003966:	4621      	mov	r1, r4
  const osThreadAttr_t defaultTask_attributes = {
 8003968:	960b      	str	r6, [sp, #44]	; 0x2c
 800396a:	950c      	str	r5, [sp, #48]	; 0x30
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800396c:	f7fe f82c 	bl	80019c8 <osThreadNew>
 8003970:	4b13      	ldr	r3, [pc, #76]	; (80039c0 <main+0x1a0>)
  const osThreadAttr_t MyTask_attributes = {
 8003972:	2224      	movs	r2, #36	; 0x24
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003974:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t MyTask_attributes = {
 8003976:	4621      	mov	r1, r4
 8003978:	a80f      	add	r0, sp, #60	; 0x3c
 800397a:	f000 f9b8 	bl	8003cee <memset>
 800397e:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <main+0x1a4>)
   MyTaskHandle = osThreadNew(MyTask, NULL, &MyTask_attributes);
 8003980:	4811      	ldr	r0, [pc, #68]	; (80039c8 <main+0x1a8>)
  const osThreadAttr_t MyTask_attributes = {
 8003982:	930f      	str	r3, [sp, #60]	; 0x3c
   MyTaskHandle = osThreadNew(MyTask, NULL, &MyTask_attributes);
 8003984:	aa0f      	add	r2, sp, #60	; 0x3c
 8003986:	4621      	mov	r1, r4
  const osThreadAttr_t MyTask_attributes = {
 8003988:	9614      	str	r6, [sp, #80]	; 0x50
 800398a:	9515      	str	r5, [sp, #84]	; 0x54
   MyTaskHandle = osThreadNew(MyTask, NULL, &MyTask_attributes);
 800398c:	f7fe f81c 	bl	80019c8 <osThreadNew>
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <main+0x1ac>)
 8003992:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003994:	f7fd fff8 	bl	8001988 <osKernelStart>
 8003998:	e7fe      	b.n	8003998 <main+0x178>
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	40020800 	.word	0x40020800
 80039a4:	40020000 	.word	0x40020000
 80039a8:	40020400 	.word	0x40020400
 80039ac:	20004a40 	.word	0x20004a40
 80039b0:	40004400 	.word	0x40004400
 80039b4:	200049d4 	.word	0x200049d4
 80039b8:	08003d37 	.word	0x08003d37
 80039bc:	08003711 	.word	0x08003711
 80039c0:	20004970 	.word	0x20004970
 80039c4:	08003d43 	.word	0x08003d43
 80039c8:	080036d5 	.word	0x080036d5
 80039cc:	200049dc 	.word	0x200049dc

080039d0 <HAL_UART_RxCpltCallback>:
	osMessageQueuePut(rxQueue, (uint8_t*)&cIn, 0, 0);
 80039d0:	4803      	ldr	r0, [pc, #12]	; (80039e0 <HAL_UART_RxCpltCallback+0x10>)
 80039d2:	4904      	ldr	r1, [pc, #16]	; (80039e4 <HAL_UART_RxCpltCallback+0x14>)
 80039d4:	6800      	ldr	r0, [r0, #0]
 80039d6:	2300      	movs	r3, #0
 80039d8:	461a      	mov	r2, r3
 80039da:	f7fe b8b7 	b.w	8001b4c <osMessageQueuePut>
 80039de:	bf00      	nop
 80039e0:	200049d4 	.word	0x200049d4
 80039e4:	200049d8 	.word	0x200049d8

080039e8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80039e8:	6802      	ldr	r2, [r0, #0]
 80039ea:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d101      	bne.n	80039f4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80039f0:	f7fc bd98 	b.w	8000524 <HAL_IncTick>
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000

080039fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a00:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <HAL_MspInit+0x40>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	9200      	str	r2, [sp, #0]
 8003a08:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a0a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003a0e:	6459      	str	r1, [r3, #68]	; 0x44
 8003a10:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003a12:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003a16:	9100      	str	r1, [sp, #0]
 8003a18:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	9201      	str	r2, [sp, #4]
 8003a1c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003a1e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003a22:	6419      	str	r1, [r3, #64]	; 0x40
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a2c:	210f      	movs	r1, #15
 8003a2e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a34:	f7fc fdae 	bl	8000594 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a38:	b003      	add	sp, #12
 8003a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800

08003a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	4606      	mov	r6, r0
 8003a48:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4a:	2214      	movs	r2, #20
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	a803      	add	r0, sp, #12
 8003a50:	f000 f94d 	bl	8003cee <memset>
  if(huart->Instance==USART2)
 8003a54:	6832      	ldr	r2, [r6, #0]
 8003a56:	4b33      	ldr	r3, [pc, #204]	; (8003b24 <HAL_UART_MspInit+0xe0>)
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d160      	bne.n	8003b1e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a5c:	2500      	movs	r5, #0
 8003a5e:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003a62:	9501      	str	r5, [sp, #4]
 8003a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a66:	4830      	ldr	r0, [pc, #192]	; (8003b28 <HAL_UART_MspInit+0xe4>)

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003a68:	4c30      	ldr	r4, [pc, #192]	; (8003b2c <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a6a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40
 8003a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a72:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003a76:	9201      	str	r2, [sp, #4]
 8003a78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a7a:	9502      	str	r5, [sp, #8]
 8003a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	9302      	str	r3, [sp, #8]
 8003a8c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a8e:	230c      	movs	r3, #12
 8003a90:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	2302      	movs	r3, #2
 8003a94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a96:	2301      	movs	r3, #1
 8003a98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aa0:	2307      	movs	r3, #7
 8003aa2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa4:	f7fc ff56 	bl	8000954 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <HAL_UART_MspInit+0xec>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aaa:	60a5      	str	r5, [r4, #8]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003aac:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8003ab0:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab8:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003aba:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003abc:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ac0:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ac2:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ac4:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003ac6:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ac8:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003aca:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003acc:	f7fc fdba 	bl	8000644 <HAL_DMA_Init>
 8003ad0:	b108      	cbz	r0, 8003ad6 <HAL_UART_MspInit+0x92>
    {
      Error_Handler();
 8003ad2:	f7ff ff93 	bl	80039fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ad6:	6374      	str	r4, [r6, #52]	; 0x34

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ad8:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <HAL_UART_MspInit+0xf0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ada:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003adc:	4c16      	ldr	r4, [pc, #88]	; (8003b38 <HAL_UART_MspInit+0xf4>)
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ade:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8003ae2:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003ae6:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aee:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003af0:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af2:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003af4:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003af6:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003af8:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003afa:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003afc:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003afe:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b00:	f7fc fda0 	bl	8000644 <HAL_DMA_Init>
 8003b04:	b108      	cbz	r0, 8003b0a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003b06:	f7ff ff79 	bl	80039fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b0a:	6334      	str	r4, [r6, #48]	; 0x30

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003b0c:	2026      	movs	r0, #38	; 0x26
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b12:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003b14:	f7fc fd3e 	bl	8000594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003b18:	2026      	movs	r0, #38	; 0x26
 8003b1a:	f7fc fd6f 	bl	80005fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b1e:	b008      	add	sp, #32
 8003b20:	bd70      	pop	{r4, r5, r6, pc}
 8003b22:	bf00      	nop
 8003b24:	40004400 	.word	0x40004400
 8003b28:	40020000 	.word	0x40020000
 8003b2c:	20004974 	.word	0x20004974
 8003b30:	40026088 	.word	0x40026088
 8003b34:	400260a0 	.word	0x400260a0
 8003b38:	200049e0 	.word	0x200049e0

08003b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b3c:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003b3e:	4601      	mov	r1, r0
{
 8003b40:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003b42:	2200      	movs	r2, #0
 8003b44:	2019      	movs	r0, #25
 8003b46:	f7fc fd25 	bl	8000594 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8003b4a:	2019      	movs	r0, #25
 8003b4c:	f7fc fd56 	bl	80005fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b50:	2500      	movs	r5, #0
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <HAL_InitTick+0x68>)
 8003b54:	9502      	str	r5, [sp, #8]
 8003b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b58:	4c13      	ldr	r4, [pc, #76]	; (8003ba8 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	645a      	str	r2, [r3, #68]	; 0x44
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b68:	a901      	add	r1, sp, #4
 8003b6a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003b6c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b6e:	f7fd fa41 	bl	8000ff4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b72:	f7fd fa2f 	bl	8000fd4 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_InitTick+0x70>)
 8003b78:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003b7a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003b7e:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b80:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_InitTick+0x74>)
 8003b82:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b86:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b88:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b8a:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003b8c:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b8e:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b90:	f7fd fb6c 	bl	800126c <HAL_TIM_Base_Init>
 8003b94:	b920      	cbnz	r0, 8003ba0 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b96:	4620      	mov	r0, r4
 8003b98:	f7fd fa4b 	bl	8001032 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003b9c:	b009      	add	sp, #36	; 0x24
 8003b9e:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	e7fb      	b.n	8003b9c <HAL_InitTick+0x60>
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	20004a80 	.word	0x20004a80
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	000f4240 	.word	0x000f4240

08003bb4 <NMI_Handler>:
 8003bb4:	4770      	bx	lr

08003bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bb6:	e7fe      	b.n	8003bb6 <HardFault_Handler>

08003bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bb8:	e7fe      	b.n	8003bb8 <MemManage_Handler>

08003bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bba:	e7fe      	b.n	8003bba <BusFault_Handler>

08003bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bbc:	e7fe      	b.n	8003bbc <UsageFault_Handler>

08003bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bbe:	4770      	bx	lr

08003bc0 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bc0:	4801      	ldr	r0, [pc, #4]	; (8003bc8 <DMA1_Stream5_IRQHandler+0x8>)
 8003bc2:	f7fc be0d 	b.w	80007e0 <HAL_DMA_IRQHandler>
 8003bc6:	bf00      	nop
 8003bc8:	20004974 	.word	0x20004974

08003bcc <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003bcc:	4801      	ldr	r0, [pc, #4]	; (8003bd4 <DMA1_Stream6_IRQHandler+0x8>)
 8003bce:	f7fc be07 	b.w	80007e0 <HAL_DMA_IRQHandler>
 8003bd2:	bf00      	nop
 8003bd4:	200049e0 	.word	0x200049e0

08003bd8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bd8:	4801      	ldr	r0, [pc, #4]	; (8003be0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8003bda:	f7fd ba3e 	b.w	800105a <HAL_TIM_IRQHandler>
 8003bde:	bf00      	nop
 8003be0:	20004a80 	.word	0x20004a80

08003be4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003be4:	4801      	ldr	r0, [pc, #4]	; (8003bec <USART2_IRQHandler+0x8>)
 8003be6:	f7fd be0b 	b.w	8001800 <HAL_UART_IRQHandler>
 8003bea:	bf00      	nop
 8003bec:	20004a40 	.word	0x20004a40

08003bf0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bf0:	490f      	ldr	r1, [pc, #60]	; (8003c30 <SystemInit+0x40>)
 8003bf2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003bf6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <SystemInit+0x44>)
 8003c00:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c02:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003c0a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003c12:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c16:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c18:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <SystemInit+0x48>)
 8003c1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c22:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c24:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c2a:	608b      	str	r3, [r1, #8]
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00
 8003c34:	40023800 	.word	0x40023800
 8003c38:	24003010 	.word	0x24003010

08003c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c42:	e003      	b.n	8003c4c <LoopCopyDataInit>

08003c44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c4a:	3104      	adds	r1, #4

08003c4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c4c:	480b      	ldr	r0, [pc, #44]	; (8003c7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c54:	d3f6      	bcc.n	8003c44 <CopyDataInit>
  ldr  r2, =_sbss
 8003c56:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c58:	e002      	b.n	8003c60 <LoopFillZerobss>

08003c5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c5c:	f842 3b04 	str.w	r3, [r2], #4

08003c60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c64:	d3f9      	bcc.n	8003c5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c66:	f7ff ffc3 	bl	8003bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c6a:	f000 f811 	bl	8003c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c6e:	f7ff fdd7 	bl	8003820 <main>
  bx  lr    
 8003c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c78:	08003d84 	.word	0x08003d84
  ldr  r0, =_sdata
 8003c7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c80:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003c84:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003c88:	20004ac0 	.word	0x20004ac0

08003c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c8c:	e7fe      	b.n	8003c8c <ADC_IRQHandler>
	...

08003c90 <__libc_init_array>:
 8003c90:	b570      	push	{r4, r5, r6, lr}
 8003c92:	4e0d      	ldr	r6, [pc, #52]	; (8003cc8 <__libc_init_array+0x38>)
 8003c94:	4c0d      	ldr	r4, [pc, #52]	; (8003ccc <__libc_init_array+0x3c>)
 8003c96:	1ba4      	subs	r4, r4, r6
 8003c98:	10a4      	asrs	r4, r4, #2
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	42a5      	cmp	r5, r4
 8003c9e:	d109      	bne.n	8003cb4 <__libc_init_array+0x24>
 8003ca0:	4e0b      	ldr	r6, [pc, #44]	; (8003cd0 <__libc_init_array+0x40>)
 8003ca2:	4c0c      	ldr	r4, [pc, #48]	; (8003cd4 <__libc_init_array+0x44>)
 8003ca4:	f000 f82c 	bl	8003d00 <_init>
 8003ca8:	1ba4      	subs	r4, r4, r6
 8003caa:	10a4      	asrs	r4, r4, #2
 8003cac:	2500      	movs	r5, #0
 8003cae:	42a5      	cmp	r5, r4
 8003cb0:	d105      	bne.n	8003cbe <__libc_init_array+0x2e>
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cb8:	4798      	blx	r3
 8003cba:	3501      	adds	r5, #1
 8003cbc:	e7ee      	b.n	8003c9c <__libc_init_array+0xc>
 8003cbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cc2:	4798      	blx	r3
 8003cc4:	3501      	adds	r5, #1
 8003cc6:	e7f2      	b.n	8003cae <__libc_init_array+0x1e>
 8003cc8:	08003d7c 	.word	0x08003d7c
 8003ccc:	08003d7c 	.word	0x08003d7c
 8003cd0:	08003d7c 	.word	0x08003d7c
 8003cd4:	08003d80 	.word	0x08003d80

08003cd8 <memcpy>:
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	1e43      	subs	r3, r0, #1
 8003cdc:	440a      	add	r2, r1
 8003cde:	4291      	cmp	r1, r2
 8003ce0:	d100      	bne.n	8003ce4 <memcpy+0xc>
 8003ce2:	bd10      	pop	{r4, pc}
 8003ce4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cec:	e7f7      	b.n	8003cde <memcpy+0x6>

08003cee <memset>:
 8003cee:	4402      	add	r2, r0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d100      	bne.n	8003cf8 <memset+0xa>
 8003cf6:	4770      	bx	lr
 8003cf8:	f803 1b01 	strb.w	r1, [r3], #1
 8003cfc:	e7f9      	b.n	8003cf2 <memset+0x4>
	...

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
